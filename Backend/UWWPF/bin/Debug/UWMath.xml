<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UWMath</name>
    </assembly>
    <members>
        <member name="T:UW.MathFunctions.ComplexNumber">
            <summary>
            Define a complex number
            
            Note that this can be replaced with System.Numerics.Complex once the system is upgraded to .Net 4.0
            
            See http://msdn.microsoft.com/en-us/library/6fbs5e2h.aspx for more information
            </summary>
        </member>
        <member name="M:UW.MathFunctions.ComplexNumber.#ctor(System.Double,System.Double)">
            <summary>
            Construct a complex number with the specified real and imaginary components
            </summary>
            <param name="real"></param>
            <param name="imag"></param>
        </member>
        <member name="P:UW.MathFunctions.ComplexNumber.Real">
            <summary>
            Real component of the complex number
            </summary>
        </member>
        <member name="P:UW.MathFunctions.ComplexNumber.Imag">
            <summary>
            Imaginary component of the complex number
            </summary>
        </member>
        <member name="M:UW.MathFunctions.ComplexNumber.IsReal(System.Double)">
            <summary>
            Determines if the complex number is real.  
            In order to be real, the absolute value of the imaginary part must be less than or equal to the specified tolerance.
            </summary>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.ComplexNumber.AreComplexNumbersEqualByValue(UW.MathFunctions.ComplexNumber,UW.MathFunctions.ComplexNumber,System.Double)">
            <summary>
            Determines if two complex numbers are equal by value
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="T:UW.MathFunctions.GeometryFunctions.GeometryUtilities">
            <summary>
            Add functionality to the System.Windows.Media.Geometry class
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.GeometryUtilities.ApproximateIntersectionPoint(System.Windows.Media.Geometry,System.Windows.Media.Geometry,System.Double,System.Windows.Media.ToleranceType)">
            <summary>
            Attempts to compute the intersection between two Geometry objects by painting them with a pen and then calculating the resulting intersection.
            This assumes that the geometries only intersect at one location (otherwise results may be unpredictable).
            This is not an exact calculation and may be slow and/or processor/ram intensive.
            
            Original inspiration at http://stackoverflow.com/questions/3029121/wpf-coordinates-of-intersection-from-two-line-objects
            
            For a direct/faster calculation, see LineGeometryExtensions.CalculateIntersection.
            </summary>
            <param name="geometry1"></param>
            <param name="geometry2"></param>
            <param name="tolerance"></param>
            <param name="tolerancetype"></param>
            <returns></returns>
        </member>
        <member name="T:UW.MathFunctions.GeometryFunctions.PointDistanceFromOriginComparer">
            <summary>
            Object used to comparer two Point objects and sort them based on their Euclidean distance from the origin.
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.PointDistanceFromOriginComparer.Compare(System.Windows.Point,System.Windows.Point)">
            <summary>
            Comparer two Point objects based on their Euclidean distance from the origin
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:UW.MathFunctions.GeometryFunctions.PointApproximateComparer">
            <summary>
            A class which comparers Points and considers them equal if they are within the specified distance of each other.
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.PointApproximateComparer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.PointApproximateComparer.#ctor(System.Double)">
            <summary>
            Construct from the specified value
            </summary>
            <param name="distance"></param>
        </member>
        <member name="P:UW.MathFunctions.GeometryFunctions.PointApproximateComparer.Distance">
            <summary>
            Specified distance at which two points are considered equal to each other under this IEqualityComparer.
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.PointApproximateComparer.Equals(System.Windows.Point,System.Windows.Point)">
            <summary>
            Equals method
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.PointApproximateComparer.GetHashCode(System.Windows.Point)">
            <summary>
            Hash code method
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:UW.MathFunctions.GeometryFunctions.LineGeometryExtensions">
            <summary>
            Add functionality to the System.Windows.Media.LineGeometry class
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.LineGeometryExtensions.ApproximatelyEqualToOtherLineGeometry(System.Windows.Media.LineGeometry,System.Windows.Media.LineGeometry,System.Double)">
            <summary>
            Checks if this LineGeometry is approximately equal to the other LineGeometry (LineGeometries are considered approximately equal if their StartPoint and EndPoint properties have Euclidean distance is less than the specified tolerance).
            </summary>
            <param name="thisLineGeometry"></param>
            <param name="otherLineGeometry"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.LineGeometryExtensions.IntersectionWithOtherLineGeometry(System.Windows.Media.LineGeometry,System.Windows.Media.LineGeometry,System.Double)">
            <summary>
            Determine if the line segement intersects with the otherSegment.
            </summary>
            <param name="seg1"></param>
            <param name="otherSegment"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.LineGeometryExtensions.IntersectionWithUWPolygon(System.Windows.Media.LineGeometry,UW.MathFunctions.GeometryFunctions.UWPolygon,System.Double)">
            <summary>
            Computes all the intersections of this LineGeometry with the specified UWPolygon.  
            
            If the LineGeometry lies on the edge of the polygon, this returns the two end points of the overlapping segment.
            
            If the seg has zero Euclidean length, this returns an empty list.
            </summary>
            <param name="seg"></param>
            <param name="uwPolygon"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.LineGeometryExtensions.IntersectionWithListLineGeometry(System.Windows.Media.LineGeometry,System.Collections.Generic.List{System.Windows.Media.LineGeometry},System.Double)">
            <summary>
            Computes all the intersections of this LineGeometry with the specified List&lt;LineGeometry&gt; object.  
            
            If the LineGeometry lies on the another one of the LineGeometry objects in the list, this returns the two end points of the overlapping segment.
            
            If the seg has zero Euclidean length, this returns an empty list.
            </summary>
            <param name="seg"></param>
            <param name="listLineGeometry"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.LineGeometryExtensions.IntersectionWithPath(System.Windows.Media.LineGeometry,System.Collections.Generic.List{System.Windows.Point},System.Double)">
            <summary>
            Computes all the intersections of this LineGeometry with the specified path.  The path is specified as a list of point
            
            If the seg has zero Euclidean length, this returns an empty list.
            </summary>
            <param name="seg"></param>
            <param name="path"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.LineGeometryExtensions.CalculateIntersection(System.Windows.Media.LineGeometry,System.Windows.Media.LineGeometry,System.Double)">
            <summary>
            Determines if two LineGeometries intersect.  If they do not intersect, this returns an empty list (Count = 0).
            
            If either of the two segments have Euclidean distance of 0, this return null.
            
            If the segments are co-linear and overlapping, this returns the points at either end of the intersection.  
            Note that in this situation (co-linear and overlapping), these results may differ from GeometryUtilitites.ApproximateIntersectionPoint
            
            This is a direct calculation and should be exact and efficient (as opposed to the slow and imprecise GeometryUtilitites.ApproximateIntersectionPoint)
            </summary>
            <param name="seg1"></param>
            <param name="seg2"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.LineGeometryExtensions.PointClosestToSpecifiedPoint(System.Windows.Media.LineGeometry,System.Windows.Point)">
            <summary>
            Finds the point on this object which is closest to the specified point
            </summary>
            <param name="lineSegment"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.LineGeometryExtensions.IsPointOnLineSegment(System.Windows.Media.LineGeometry,System.Windows.Point,System.Double)">
            <summary>
            Checks if the specifiedPoint is on this object (within the specified radius)
            </summary>
            <param name="lineSegment"></param>
            <param name="specifiedPoint"></param>
            <param name="radius">the specifiedPoint is considered on the LineGeometry if it is within this radius</param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.LineGeometryExtensions.TurnByAngle(System.Windows.Media.LineGeometry,System.Double,System.Double)">
            <summary>
            Returns the point if you were to walk along this LineGeometry (from StartPoint to EndPoint)
            and then when you reach EndPoint, you turn by the specified angle and move by the specified distance.
            
            A positive angleRadians denotes a turn to the left, and a negative angleRadian denotes a turn to the right.
            </summary>
            <param name="lineSegment"></param>
            <param name="angleRadians"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.LineGeometryExtensions.TurnLeft(System.Windows.Media.LineGeometry,System.Double)">
            <summary>
            Returns the point if you were to walk along this LineGeometry (from StartPoint to EndPoint)
            and then when you reach EndPoint, you turn left by 90 degrees and move by the specified distance.
            </summary>
            <param name="lineSegment"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.LineGeometryExtensions.TurnRight(System.Windows.Media.LineGeometry,System.Double)">
            <summary>
            Returns the point if you were to walk along this LineGeometry (from StartPoint to EndPoint)
            and then when you reach EndPoint, you turn right by 90 degrees and move by the specified distance.
            </summary>
            <param name="lineSegment"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.LineGeometryExtensions.TranslateLineGeometry(System.Windows.Media.LineGeometry,System.Windows.Point)">
            <summary>
            Adds the specified point to the LineGeometry.StartPoint and .EndPoint.
            </summary>
            <param name="lineSegment"></param>
            <param name="translationVector"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.LineGeometryExtensions.RotateLineGeometry(System.Windows.Media.LineGeometry,System.Double)">
            <summary>
            Rotates the LineGeometry about the point (0,0) through the angle theta
            </summary>
            <param name="segment"></param>
            <param name="theta">rotation angle (radians)</param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.LineGeometryExtensions.Reverse(System.Windows.Media.LineGeometry)">
            <summary>
            Returns a new LineGeometry object which is the same as this object except the StartPoint and EndPoint have been switched.
            </summary>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.LineGeometryExtensions.CalculateXIntercept(System.Windows.Media.LineGeometry,System.Double)">
            <summary>
            Calculates the x coordinate where the line segment crosses the x axis.  If this segment does not cross the x axis, the return value is an empty list.
            If the segment lies entirely on the x axis, this returns the two end points of the intersection.
            </summary>
            <param name="segment"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.LineGeometryExtensions.CalculateSlope(System.Windows.Media.LineGeometry)">
            <summary>
            Calculates the slope of the line.  If the line is vertical, this returns null.
            </summary>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.LineGeometryExtensions.CalculateAngleFromXAxis(System.Windows.Media.LineGeometry)">
            <summary>
            Calculates the angle between the segment (from StartPoint to EndPoint) and the x axis if the origin was at the StartPoint of the segment.
            </summary>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.LineGeometryExtensions.IsVertical(System.Windows.Media.LineGeometry)">
            <summary>
            Checks if the LineGeometry is vertical.
            </summary>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.LineGeometryExtensions.IsHorizontal(System.Windows.Media.LineGeometry,System.Double)">
            <summary>
            Checks if the LineGeometry is horizontal.  The segment is deemed horizontal if the y components are within the specified tolerance.
            </summary>
            <param name="segment"></param>
            <param name="horizontalTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.LineGeometryExtensions.CalculateSegmentLength(System.Windows.Media.LineGeometry)">
            <summary>
            Calculates the Euclidean distance of the LineGeometry
            </summary>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.LineGeometryExtensions.VectorFromStartPointToEndPoint(System.Windows.Media.LineGeometry)">
            <summary>
            Computes the vector from the StartPoint to the EndPoint
            </summary>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.LineGeometryExtensions.PointingUp(System.Windows.Media.LineGeometry)">
            <summary> 
            This returns a LineGeometry which is the same as this LineGeometry except the returned object has the guarantee that the returned LineGeometry has its EndPoint with a larger y component that the StartPoint.
            In other words, a vector from the StartPoint to the EndPoint of the returned LineGeometry should be pointing up-wards.
            
            If the start and end point have the same y component, this output should be the same as the calling object.
            </summary>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="T:UW.MathFunctions.GeometryFunctions.ListLineGeometryExtensions">
            <summary>
            Extend functionality of the List&lt;LineGeometry&gt; type.
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.ListLineGeometryExtensions.ApproximatelyEqualToOtherListLineGeometry(System.Collections.Generic.List{System.Windows.Media.LineGeometry},System.Collections.Generic.List{System.Windows.Media.LineGeometry},System.Double)">
            <summary>
            Checks if each element in this list is approximately equal to the other element in the list.
            </summary>
            <param name="thisListLineGeometry"></param>
            <param name="otherListLineGeometry"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="T:UW.MathFunctions.GeometryFunctions.ListPoint3DExtensions">
            <summary>
            Extend functionality of the List&lt;Point3D&gt; type.
             
            These methods should be general purpose geometry functions.
            
            For more extension methods for the List&lt;LLAPoint&gt; type related to LLA coordinates and mapping, see UWMapping\Utilities\ListPointExtensions.cs   
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.ListPoint3DExtensions.ApproximatelyEqualToOtherListPoint(System.Collections.Generic.List{System.Windows.Media.Media3D.Point3D},System.Collections.Generic.List{System.Windows.Media.Media3D.Point3D},System.Double)">
            <summary>
            Checks if this list of Point is approximately equal to the other List point (points are considered approximately equal if their Euclidean distance is less than the specified tolerance).
            </summary>
            <param name="thisListPoint"></param>
            <param name="otherListPoint"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="T:UW.MathFunctions.GeometryFunctions.ListPointExtensions">
            <summary>
            Extend functionality of the List&lt;Point&gt; type.
             
            These methods should be general purpose geometry functions.
            
            For more extension methods for the List&lt;LLAPoint&gt; type related to LLA coordinates and mapping, see UWMapping\Utilities\ListPointExtensions.cs            
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.ListPointExtensions.ApproximatelyEqualToOtherListPoint(System.Collections.Generic.List{System.Windows.Point},System.Collections.Generic.List{System.Windows.Point},System.Double)">
            <summary>
            Checks if this list of Point is approximately equal to the other List point (points are considered approximately equal if their Euclidean distance is less than the specified tolerance).
            </summary>
            <param name="thisListPoint"></param>
            <param name="otherListPoint"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.ListPointExtensions.ReturnTranslatedPoints(System.Collections.Generic.List{System.Windows.Point},System.Windows.Point)">
            <summary>
            Returns a List of Point objects which is the same as the calling List of Point objects but each point is translated by the specified vector/point.
            </summary>
            <param name="points"></param>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.ListPointExtensions.ReturnScaledPoints(System.Collections.Generic.List{System.Windows.Point},System.Double)">
            <summary>
            Returns a List of Point objects which is the same as the calling List of Point objects but each point is translated multiplied by the specified scaleFactor.
            </summary>
            <param name="points"></param>
            <param name="scaleFactor">scalar to multiply each Point by (can be negative)</param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.ListPointExtensions.ReturnRotatedPoints(System.Collections.Generic.List{System.Windows.Point},System.Double)">
            <summary>
            Returns a List of Point objects which is the same as the calling List of Point objects but rotated by the specified angle theta (in radians, positive about the z axis).
            </summary>
            <param name="points"></param>
            <param name="thetaRadians"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.ListPointExtensions.ReturnPointsReflectedOverYAxis(System.Collections.Generic.List{System.Windows.Point})">
            <summary>
            Returns a List of Point objects which is the same as the calling List of Point objects but reflected over the y-axis.  In other words, the x values of all points are negative.
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.ListPointExtensions.ReturnPointsReflectedOverXAxis(System.Collections.Generic.List{System.Windows.Point})">
            <summary>
            Returns a List of Point objects which is the same as the calling List Point objects but reflected over the x-axis.  In other words, the y values of all points are negative.
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.ListPointExtensions.NearestPoint(System.Collections.Generic.List{System.Windows.Point},System.Windows.Point,System.Int32@)">
            <summary>
            Finds the nearest point (and which index where it occurs) to the specified point
            </summary>
            <param name="points"></param>
            <param name="point"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.ListPointExtensions.PathLength(System.Collections.Generic.List{System.Windows.Point})">
            <summary>
            If the list of Point objects represents a path, this computes the Euclidean length of hte path
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.ListPointExtensions.GetSegment(System.Collections.Generic.List{System.Windows.Point},System.Int32)">
            <summary>
            If the list of Point objects represents a path, this returns the segment specified by segmentIndex.
            
            This will throw an ArgumentException if something goes wrong.
            
            See ListPointExtensions.ppt for more information
            </summary>
            <param name="pathPoints"></param>
            <param name="segmentIndex"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.ListPointExtensions.NumSegments(System.Collections.Generic.List{System.Windows.Point})">
            <summary>
            If the list of Point objects represents a path, this returns number of segments in the path.
            
            This will throw an ArgumentException if something goes wrong.
            </summary>
            <param name="pathPoints"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.ListPointExtensions.ProjectPointOntoPath(System.Collections.Generic.List{System.Windows.Point},System.Windows.Point,System.Int32@)">
            <summary>
            If the list of Point objects represents a path, this projects the specified point onto the closest point on the path.        
            
            This version of the method also returns the index of the segment that the point is projected onto.
            </summary>
            <param name="pathPoints"></param>
            <param name="point"></param>
            <param name="segmentIndex">This is the index of the segment that the point is projected onto.</param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.ListPointExtensions.LastNPathSegments(System.Collections.Generic.List{System.Windows.Point},System.Int32)">
            <summary>
            Returns a list of the last N path segments.  For example, 
            
            if N == 0 this returns an empty list
            if N == 1 this returns the last segment in the path
            if N >= number of segments, this returns all the path segments
            
            The order of the returned segments are from last segment.  
            In other words, the first item in the returned list is the last path segment,
            the second item in the returned list is the second to last path segment, etc.
            </summary>
            <param name="pathPoints"></param>
            <param name="N"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.ListPointExtensions.ProjectPointOntoPath(System.Collections.Generic.List{System.Windows.Point},System.Windows.Point)">
            <summary>
            If the list of Point objects represents a path, this projects the specified point onto the closest point on the path.        
            </summary>
            <param name="pathPoints"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.ListPointExtensions.DistanceToNearestPathPoint(System.Collections.Generic.List{System.Windows.Point},System.Windows.Point)">
            <summary>
            Computes the distance from the specified point to the nearest point on the path.
            
            For more information and related functionality, see ProjectPointOntoPath
            </summary>
            <param name="pathPoints"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.ListPointExtensions.ToPathGeometry(System.Collections.Generic.List{System.Windows.Point})">
            <summary>
            Convert this object to the equivalent PathGeometry (which can be used for drawing)
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.ListPointExtensions.ConvertToUWMatrix(System.Collections.Generic.List{System.Windows.Point})">
            <summary>
            Converts this List&lt;Point&gt; to a UWMatrix.  Each point in the List is taken to be a column of the returned matrix.
            
            In other words, the returned UWMatrix has the form of
            
            [pt1.X  pt2.X  ...  ptN.X]
            [pt1.Y  pt2.Y  ...  ptN.Y]
            
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="T:UW.MathFunctions.GeometryFunctions.Point3DExtensions">
            <summary>
            Extension methods for the System.Windows.Point.System.Windows.Media.Media3D.Point3D struct.
            
            These are extension methods which are general purpose math geometry operations.  
            For operations which are specific to mapping, lat, lon, etc. see UWMapping\Utilities\PointExtensions2.cs
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.Point3DExtensions.ApproximatelyEqualToOtherPoint(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Double)">
            <summary>
            Checks if this point is approximately equal to the other point (points are considered approximately equal if their Euclidean distance is less than the specified tolerance).
            
            Throws an exception if the specified tolernace is negative.
            </summary>
            <param name="thisPoint"></param>
            <param name="otherPoint"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.Point3DExtensions.VectorFromSpecifiedPoint(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Computes the vector from the specified origin to this point.
            </summary>
            <param name="endPoint"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.Point3DExtensions.UnitVectorFromSpecifiedPoint(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Computes the unit vector from the specified point to this point
            </summary>
            <param name="endPoint"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.Point3DExtensions.DistanceFromOrigin(System.Windows.Media.Media3D.Point3D)">
            <summary>
            Returns the point's Euclidean distance from the origin.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.Point3DExtensions.ToUWMatrix(System.Windows.Media.Media3D.Point3D)">
            <summary>
            Returns this Point3D as the equivalent 3x1 UWMatrix object.  This returned vector is the position expressed in the XYZ frame.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:UW.MathFunctions.GeometryFunctions.PointExtensions">
            <summary>
            Extension methods for the System.Windows.Point.
            
            These are extension methods which are general purpose math geometry operations.  
            For operations which are specific to mapping, lat, lon, etc. see UWMapping\Utilities\PointExtensions2.cs
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.PointExtensions.ReturnRotatedPoint(System.Windows.Point,System.Double)">
            <summary>
            Returns the point which is this point rotated about the z axis through the angle theta (in radians)
            </summary>
            <param name="point"></param>
            <param name="thetaRadians"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.PointExtensions.ReturnTranslatedPoint(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns this Point + translationVector.
            </summary>
            <param name="point"></param>
            <param name="translationVector"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.PointExtensions.ReturnScaledPoint(System.Windows.Point,System.Double)">
            <summary>
            Returns this Point scaled by the scaling parameter (same as multiplying the point with a scalar)
            </summary>
            <param name="point"></param>
            <param name="scaling"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.PointExtensions.DistanceFromOrigin(System.Windows.Point)">
            <summary>
            Returns the point's Euclidean distance from the origin.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.PointExtensions.DistanceFromPoint(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the Euclidean distance between this point and the otherPoint
            </summary>
            <param name="point"></param>
            <param name="otherPoint"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.PointExtensions.VectorFromSpecifiedPoint(System.Windows.Point,System.Windows.Point)">
            <summary>
            Computes the vector from the specified origin to this point.
            </summary>
            <param name="endPoint"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.PointExtensions.UnitVectorFromSpecifiedPoint(System.Windows.Point,System.Windows.Point)">
            <summary>
            Computes the unit vector from the specified point to this point
            </summary>
            <param name="endPoint"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.PointExtensions.ApproximatelyEqualToOtherPoint(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Checks if this point is approximately equal to the other point (points are considered approximately equal if their Euclidean distance is less than the specified tolerance).
            
            Throws an exception if the specified tolernace is negative.
            </summary>
            <param name="thisPoint"></param>
            <param name="otherPoint"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.PointExtensions.ReturnNegative(System.Windows.Point)">
            <summary>
            Returns the negative point (x and y are negative of this value)
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.PointExtensions.PointBetweenTwoSpecifiedPoints(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the point which is halfway between this point and the otherPoint.
            </summary>
            <param name="thisPoint"></param>
            <param name="otherPoint"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.PointExtensions.LineInSpecifiedDirection(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Returns a LineGeometry representing the line from this point in the directionVector and having the specified length.
            
            For more information, see PointExtensions.ppt.
            </summary>
            <param name="thisPoint"></param>
            <param name="directionVector"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.PointExtensions.LineInSpecifiedDirection(System.Windows.Point,System.Double,System.Double)">
            <summary>
            Returns a LineGeometry representing the line from this point in direction/heading specified by angle and having the specified length.
            </summary>
            <param name="thisPoint"></param>
            <param name="angle">angle from the x axis of the heading</param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.PointExtensions.PointInSpecifiedDirection(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Returns a Point representing starting at this point, and then moving in the specified directionVector by the specified length
            </summary>
            <param name="thisPoint"></param>
            <param name="directionVector"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.PointExtensions.ReadXml(System.Windows.Point,System.Xml.XmlReader)">
            <summary>
            Read from an XML file.  This is intended to be used with XmlSerialization procedures.
            
            At method entry: reader should be positioned at a <Point> tag.  
            At method exit:  reader should be positioned just past the </Point> tag.
            
            Note: This method is not actually implementing the IXmlSerializable interface (it simply has the same method name)
            
            http://stackoverflow.com/questions/279534/proper-way-to-implement-ixmlserializable
            </summary>
            <param name="pt"></param>
            <param name="reader"></param>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.PointExtensions.WriteXml(System.Windows.Point,System.Xml.XmlWriter)">
            <summary>
            Write this to an XML file.  This is intended to be used with XmlSerialization procedures, as such, it should be called by the framework and not by the client directly.
            
            Note: This method is not actually implementing the IXmlSerializable interface (it simply has the same method name)
            
            http://stackoverflow.com/questions/279534/proper-way-to-implement-ixmlserializable
            </summary>
            <param name="pt"></param>
            <param name="writer"></param>
        </member>
        <member name="T:UW.MathFunctions.GeometryFunctions.RectangleGeometryExtensions">
            <summary>
            Extend the functionality of the RectangleGeometry class
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.RectangleGeometryExtensions.Area(System.Windows.Media.RectangleGeometry)">
            <summary>
            Compute the area of the RectangleGeometry
            </summary>
            <param name="rectangleGeometry"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.RectangleGeometryExtensions.ToUWPolygon(System.Windows.Media.RectangleGeometry)">
            <summary>
            Computes the equivalent UWPolygon object
            </summary>
            <param name="rectangleGeometry"></param>
            <returns></returns>
        </member>
        <member name="T:UW.MathFunctions.GeometryFunctions.RectExtensions">
            <summary>
            Extension methods for the Rect class
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.RectExtensions.Centroid(System.Windows.Rect)">
            <summary>
            Computes the center point of the rectangle.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.RectExtensions.Area(System.Windows.Rect)">
            <summary>
            Computes the area of the rectangle
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="T:UW.MathFunctions.GeometryFunctions.IHittableCopyable">
            <summary>
            Defines a polygon which supports 3D hit detection and and deep copying.
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.IHittableCopyable.DeepCopy2">
            <summary>
            Returns a new IHittableCopyable object which is unique from the calling object (changes to the original do not affect the copy, and vice versa).
            The suffix of '2' is used to differentiate this method from a standard DeepCopy method that many classes will implement already.
            </summary>
            <returns></returns>
        </member>
        <member name="T:UW.MathFunctions.GeometryFunctions.IHittable3D">
            <summary>
            Define a polygon which is capable of performing hit detection in 3D.
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.IHittable3D.IsPointInPolygon(System.Windows.Media.Media3D.Point3D,System.Double)">
            <summary>
            Tests whether the specified Point is within the polygon object or not.  A point is considered in the polygon if it is within the specified tolerance of the edge of the polygon.
            </summary>
            <param name="point"></param>
            <param name="tolerance">Point is considered within the polygon if it comes this distance of one of the vertices</param>
            <returns></returns>
        </member>
        <member name="T:UW.MathFunctions.GeometryFunctions.ISimplePolygon">
            <summary>
            Interface to describe a polygon
            </summary>
        </member>
        <member name="P:UW.MathFunctions.GeometryFunctions.ISimplePolygon.Vertices">
            <summary>
            List of all the vertices of the polygon
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.ISimplePolygon.IsConvex">
            <summary>
            Check if the polygon is convex or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.ISimplePolygon.GetEdge(System.Int32)">
            <summary>
            Returns the specified edge (edgeIndex) of the polygon.  edgeIndex can be in the range [0, numVertices-1]
            
            edgeIndex = 0 implies the edge between vertices 0 and 1
            edgeIndex = numVertices-1 implies the edge between vertices n-1 to 0.
            </summary>
            <param name="edgeIndex"></param>
            <returns></returns>
        </member>
        <member name="T:UW.MathFunctions.GeometryFunctions.UWPolygon3D">
            <summary>
            Represent a simple, lightweight polygon in the XY plane which is extruded in the Z direction.
            This represents a 3D volume with vertical side walls.
            </summary>
        </member>
        <member name="F:UW.MathFunctions.GeometryFunctions.UWPolygon3D.height">
            <summary>
            See Height property for description.
            </summary>
        </member>
        <member name="F:UW.MathFunctions.GeometryFunctions.UWPolygon3D.z">
            <summary>
            See Z property for description
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon3D.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon3D.#ctor(System.Collections.Generic.List{System.Windows.Point},System.Double,System.Double)">
            <summary>
            Construct from the specified inputs.
            </summary>
            <param name="vertices">a list of the polygon vertices in the XY plane</param>
            <param name="height">the height of the polygon</param>
            <param name="z">the location of the z centroid of the polygon</param>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon3D.#ctor(UW.MathFunctions.GeometryFunctions.UWPolygon,System.Double,System.Double)">
            <summary>
            Construct from the specified inputs.
            </summary>
            <param name="uwPolygon">polygon to specify the shape in the XY plane</param>
            <param name="height">the height of the polygon</param>
            <param name="z">the location of the z centroid of the polygon</param>
        </member>
        <member name="P:UW.MathFunctions.GeometryFunctions.UWPolygon3D.Height">
            <summary>
            The total height of the volume (from top to bottom).
            Note that this is NOT a half distance (it is not the distance from the centroid to the top).
            </summary>
        </member>
        <member name="P:UW.MathFunctions.GeometryFunctions.UWPolygon3D.Z">
            <summary>
            The z position of the center of the 3D polygon.  
            This is the distance from the origin to the middle of the polygon along the z-axis.
            </summary>
        </member>
        <member name="P:UW.MathFunctions.GeometryFunctions.UWPolygon3D.ZMax">
            <summary>
            The max height of the polygon.
            This is the distance from the origin to the top of the polygon along the z-axis.
            </summary>
        </member>
        <member name="P:UW.MathFunctions.GeometryFunctions.UWPolygon3D.ZMin">
            <summary>
            The min height of the polygon.
            This is the distance from the origin to the bottom of the polygon along the z-axis.
            </summary>
        </member>
        <member name="P:UW.MathFunctions.GeometryFunctions.UWPolygon3D.Vertices">
            <summary>
            The vertices of the polygon along the middle of the polygon.
            In other words, these are the points which are the vertices of the polygon in the XY plane and halfway between the top and bottom of the polygon in the Z direction.
            Note that this is a read-only property.
            See UWPolygon3D.nb/Vertices for more information.
            </summary>
        </member>
        <member name="P:UW.MathFunctions.GeometryFunctions.UWPolygon3D.zMin">
            <summary>
            The minimum z value of the polygon (the bottom of the polygon)
            </summary>
        </member>
        <member name="P:UW.MathFunctions.GeometryFunctions.UWPolygon3D.zMax">
            <summary>
            The maximum z value of the polygon (the top of the polygon)
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon3D.ReturnTranslatedPolygon(System.Windows.Media.Media3D.Point3D)">
            <summary>
            Returns a polygon which is the same as the calling polygon but translated by the specified vector/point3D.
            </summary>
            <param name="translationVector"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon3D.DeepCopy">
            <summary>
            Returns a new UWPolygon3D object which is unique from the calling object (changes to the original do not affect the copy, and vice versa).
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon3D.DeepCopy2">
            <summary>
            Returns a new IHittableCopyable object which is unique from the calling object (changes to the original do not affect the copy, and vice versa).
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon3D.IsPointInPolygon(System.Windows.Media.Media3D.Point3D,System.Double)">
            <summary>
            Tests whether the specified Point is within the polygon object or not.  A point is considered in the polygon if it is within the specified tolerance of the edge of the polygon.
            </summary>
            <param name="point"></param>
            <param name="tolerance">Point is considered within the polygon if it comes this distance of one of the vertices</param>
            <returns></returns>
        </member>
        <member name="T:UW.MathFunctions.GeometryFunctions.UWPolygonConvex">
            <summary>
            Represent a convex polygon. 
            
            Note to developers: The public API of this class should be carefully managed to ensure that the polygon remains convex.
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygonConvex.#ctor">
            <summary>
            Creates a convex polygon.
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygonConvex.#ctor(System.Collections.Generic.List{System.Windows.Point})">
            <summary>
            Creates a convex polygon from a list of Points.  Note that this will throw an exception if the vertices do not consistitute a convex polygon.
            </summary>
            <param name="vertices"></param>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygonConvex.#ctor(UW.MathFunctions.GeometryFunctions.ISimplePolygon)">
            <summary>
            Creates a convex polygon from an ISimplePolygon.  Note that this will throw an exception if the vertices do not consistitute a convex polygon.
            </summary>
            <param name="polygon"></param>
        </member>
        <member name="P:UW.MathFunctions.GeometryFunctions.UWPolygonConvex.AscendingVerticesGoClockwiseAroundPolygon">
            <summary>
            Returns true of the direction of ascending vertices around the polygon is clockwise
            </summary>
            <returns></returns>
        </member>
        <member name="P:UW.MathFunctions.GeometryFunctions.UWPolygonConvex.Vertices">
            <summary>
            The vertices of the polygon as an array of Point objects
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygonConvex.AddVertex(System.Windows.Point)">
            <summary>
            Add a vertex to the polygon. Note that this will throw an exception if the vertices do not consistitute a convex polygon.
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygonConvex.SetVertex(System.Int32,System.Windows.Point)">
            <summary>
            Moves the specified vertex.  Note that this will throw an exception if the vertices do not consistitute a convex polygon.
            </summary>
            <param name="vertexIndex"></param>
            <param name="newVertex"></param>
        </member>
        <member name="T:UW.MathFunctions.GeometryFunctions.UWPolygonConvex.InternalPointEnum">
            <summary>
            Enum denoting different desired internal positions
            </summary>
        </member>
        <member name="F:UW.MathFunctions.GeometryFunctions.UWPolygonConvex.InternalPointEnum.CentroidAxisAlignedMinimumBoundingBox">
            <summary>
            Centroid of an axis aligned minimum bounding box
            </summary>
        </member>
        <member name="F:UW.MathFunctions.GeometryFunctions.UWPolygonConvex.InternalPointEnum.CentroidMinimalAreaEnclosingRectangle">
            <summary>
            Centroid of the minimum area enclosing rectangle (rectangle is XY orientated)
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygonConvex.ComputeInternalPoint(UW.MathFunctions.GeometryFunctions.UWPolygonConvex.InternalPointEnum)">
            <summary>
            Finds an internal point of the convex polygon.  If the polygon does not have at least 3 points, this returns null.
            </summary>
            <param name="internalPointEnum"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygonConvex.ComputeMinimumAreaEnclosingRectangleIndex">
            <summary>
            Computes the index of the polygon vertex where the minimal area enclosing rectangle will align with.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygonConvex.ComputeMinimumAreaEnclosingRectangle">
            <summary>
            Computes the minimal area enclosing rectangle of this convex polygon.  
            This uses a rotating caliper method.
            http://en.wikipedia.org/wiki/Minimum_bounding_box_algorithms#Two_dimensions
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygonConvex.BufferPointOutside(System.Windows.Point,System.Windows.Point,System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Moves the point outside the polygon by the specified bufferDistance.  
            
            This moves it in an iterative fashion and terminates when the distance between the point an the nearest polygon edge is 
            in the range of [bufferDistance, bufferDistance + bufferTolerance]
            
            Throws an exception if something goes wrong.
            
            See Diagrams.ppt for more information
            </summary>
            <param name="point"></param>
            <param name="directionVector">a 2D vector specifying the direction in which to move the point to be buffered</param>
            <param name="bufferDistance">distance away from the polygon that the point must be</param>
            <param name="bufferTolerance">distance</param>
            <param name="maxIterations"></param>
            <param name="tolerance">tolerance for intersection calculations.</param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygonConvex.throwExceptionIfNotConvex">
            <summary>
            Throws an exception if this object is not convex
            </summary>
        </member>
        <member name="T:UW.MathFunctions.GeometryFunctions.UWPolygon">
            <summary>
            Represent a simple, lightweight polygon.
            </summary>
        </member>
        <member name="F:UW.MathFunctions.GeometryFunctions.UWPolygon.vertices">
            <summary>
            Store the vertices as a list of Point objects
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.#ctor(System.Collections.Generic.List{System.Windows.Point})">
            <summary>
            Construct from a list of Point
            </summary>
            <param name="vertices"></param>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.#ctor(UW.MathFunctions.GeometryFunctions.UWPolygon)">
            <summary>
            Copy constructor.  This constructs a new, unique object based on the specified object.
            </summary>
            <param name="polygon"></param>
        </member>
        <member name="P:UW.MathFunctions.GeometryFunctions.UWPolygon.AxisAlignedCentroid">
            <summary>
            Describes the centroid of the polygon (halfway between xMin and xMax and halfway between yMin and ymax).
            If the polygon is invalid (ie there are no point in it) this is null.
            </summary>
        </member>
        <member name="P:UW.MathFunctions.GeometryFunctions.UWPolygon.NumVertices">
            <summary>
            The number of vertices in the polygon
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.isPointInPolygonBase(System.Windows.Point,System.Double)">
            <summary>
            If the polygon has 3 or more point, this checks if the point is in the polygon or not.  This does not take edge cases into account (such as the point being on the edge of the polygon)
            
            Uses a non-optimized winding algorithm
            http://en.wikipedia.org/wiki/Winding_number
            </summary>
            <param name="point"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.returnVerticesAsPointArray">
            <summary>
            Return the vertices as an array of Point objects
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.getBounds(System.Nullable{System.Double}@,System.Nullable{System.Double}@,System.Nullable{System.Double}@,System.Nullable{System.Double}@)">
            <summary>
            Get the maximum/minimum x and y values of the polygon
            </summary>
            <param name="xMin"></param>
            <param name="xMax"></param>
            <param name="yMin"></param>
            <param name="yMax"></param>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.ApproximatelyEqualToOtherUWPolygon(UW.MathFunctions.GeometryFunctions.UWPolygon,System.Double)">
            <summary>
            Checks if this is approximately equal to the other UWPolygon.  Two polygons are considered approximately equal if
                -have same number of vertices
                -all vertex differences have Euclidean distance is less than the specified tolerance
            </summary>
            <param name="otherUWPolygon"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.AddVertex(System.Windows.Point)">
            <summary>
            Add a vertex to the polygon.
            </summary>
            <param name="vertex"></param>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.ReverseVertexIndexDirection">
            <summary>
            Simply reverses the order of the vertices indexing.  In other words, the first vertex becomes the last and vice versa
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.ShiftVertexIndexing">
            <summary>
            Shifts the vertex indexing forward by 1 in a ring-buffer sense.  For example
            
            index         0   1   2   3
            vertex before A   B   C   D
            vertex after  D   A   B   C
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.ShiftVertexIndexingBackwards">
            <summary>
            Shifts the vertex indexing backward by 1 in a ring-buffer sense.  For example
            
            index         0   1   2   3
            vertex before A   B   C   D
            vertex after  B   C   D   A
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.IsPointOnPolygonEdge(System.Windows.Point,System.Double)">
            <summary>
            Tests if a point is on the edge of the polygon.  A point is considered on the edge if it comes within the specified tolerance of an edge.
            </summary>
            <param name="point"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.IsPointInPolygon(System.Windows.Point,System.Double)">
            <summary>
            Tests whether the specified Point is within the polygon object or not.  A point is considered in the polygon if it is within the specified tolerance of the edge of the polygon.
            </summary>
            <param name="point"></param>
            <param name="tolerance">Point is considered within the polygon if it comes this distance of one of the vertices</param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.IsPointStrictlyInPolygon(System.Windows.Point,System.Double)">
            <summary>
            Tests whether the point is strictly inside the polygon or not.  This if the point is on the edge, it is not strictly inside the polygon.
            </summary>
            <param name="point"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.ToPathGeometry">
            <summary>
            Convert this object to the equivalent PathGeometry (which can be used for drawing)
            
            Not used by Search Plugin nor in the UW.sln.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.ReturnTranslatedPolygon(System.Windows.Point)">
            <summary>
            Returns a polygon which is the same as the calling polygon but translated by the specified vector/point.
            </summary>
            <param name="translationVector"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.ReturnScaledPolygon(System.Double)">
            <summary>
            Returns a polygon which is the same as the calling polyogn but each vertex is multiplied (scaled) by the specified scaleFactor.
            </summary>
            <param name="scaleFactor">scalar to multiply each vertex of the polygon by (can be negative)</param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.ReturnRotatedPolygon(System.Double)">
            <summary>
            Returns a polygon which is the same as the calling polygon but rotated by the specified angle theta (in radians, positive about the z axis).
            </summary>
            <param name="thetaRadians"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.ReturnRotatedPolygonAboutSpecificPoint(System.Double,System.Windows.Point)">
            <summary>
            Returns a polygon which is the same as the calling polygon but rotated by the specified angle theta (in radians, positive about the z axis).  The rotation is applied about the specific point.
            </summary>
            <param name="thetaRadians"></param>
            <param name="rotationPoint"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.ReturnPolygonReflectedOverXAxis">
            <summary>
            Returns a polygon which is the same as the calling polygon but reflected over the x-axis (y points are negative).
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.ReturnPolygonReflectedOverYAxis">
            <summary>
            Returns a polygon which is the same as the calling polygon but reflected over the y-axis (x points are negative).
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.ReturnPolygonWithOriginAtSpecifiedVertexAndAlignedWithEdge(System.Int32)">
            <summary>
            Returns a polygon which is the same as the calling polygon but rotated and translated so that the specified vertex is the new origin and its corresponding edge is aligned with the x-axis
            </summary>
            <param name="vertexIndex"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.ComputeAxisAlignedEnclosingRectangle">
            <summary>
            Computes the rectangle which encloses the polygon.  This rectangle is aligned with the x and y axis.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.DistanceToNearestPolygonEdge(System.Windows.Point)">
            <summary>
            Computes the shortest distance from the specified point to the nearest polygon edge.
            
            For more information and related functionality, see ProjectPointOntoPolygonEdge
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.PrintToFile(System.String)">
            <summary>
            Prints object to a file.  This result in a file with 2 rows and as many columns as there are points in the polygon
            
            [pt1.Y  pt2.X   ... ptN.X]
            [pt1.Y  pt2.Y   ... ptN.Y]
            </summary>
            <param name="directoryFileString"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.ProjectPointOntoPolygonEdge(System.Windows.Point)">
            <summary>
            Projects the specified point onto the closest point on the polygon's edge.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.ProjectPointOntoPolygonEdge(System.Windows.Point,System.Int32@)">
            <summary>
            Projects the specified point onto the closest point on the polygon's edge.
            </summary>
            <param name="point"></param>
            <param name="edgeIndex">the edge index that the point is projected onto</param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.PathAroundPolygonAscendingNumbering(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Returns a list of points which "walk around" the polygon in the direction of ascending vertex indices.
            
            The start point of the walk is determined by projecting the startCoordinate onto the polygon's edge.
            The end point of the walk is determined by projecting the endCoordinate onto the polygon's edge.
            </summary>
            <param name="startCoordinate"></param>
            <param name="endCoordinate"></param>
            <param name="radius">parameter to determine how close a point is to being colinear with one of the edges</param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.PathAroundPolygonDescendingNumbering(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Performs the same operations as UWPolygon.PathAroundPolygonAscendingNumbering except it proceeds in descending vertex numbering.
            </summary>
            <param name="startCoordinate"></param>
            <param name="endCoordinate"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.GetVertex(System.Int32)">
            <summary>
            Returns the vertex specified by the vertexIndex.
            
            This will throw an ArgumentException if the vertexIndex is out of range.
            </summary>
            <param name="vertexIndex"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.SetVertex(System.Int32,System.Windows.Point)">
            <summary>
            Sets the specified vertex to the newVertex.
            
            This will throw an ArgumentException if the vertexIndex is out of range.
            </summary>
            <param name="vertexIndex"></param>
            <param name="newVertex"></param>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.DeepCopy">
            <summary>
            Returns a new UWPolygon object which is unique from the calling object (changes to the original do not affect the copy, and vice versa).
            </summary>
            <returns></returns>
        </member>
        <member name="P:UW.MathFunctions.GeometryFunctions.UWPolygon.Vertices">
            <summary>
            The vertices of the polygon as an array of Point objects
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.IsConvex">
            <summary>
            Checks if the polygon is convex or not.
            
            See stackoverflow discussion entitled "How do determine if a polygon is complex/convex/nonconvex?"
            http://stackoverflow.com/questions/471962/how-do-determine-if-a-polygon-is-complex-convex-nonconvex
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygon.GetEdge(System.Int32)">
            <summary>
            Returns the specified edge (edgeIndex) of the polygon.  edgeIndex can be in the range [0, numVertices-1]
            
            edgeIndex = 0 implies the edge between vertices 0 and 1
            edgeIndex = numVertices-1 implies the edge between vertices n-1 to 0.
            </summary>
            <param name="edgeIndex"></param>
            <returns></returns>
        </member>
        <member name="T:UW.MathFunctions.GeometryFunctions.UWPolygonPixelator">
            <summary>
            This transforms a polygon to a UWGridPolygon, where each RectangularCell in 
            the UWGridPolygon is either within the polygon or is on the edge of the polygon.
            </summary>
        </member>
        <member name="F:UW.MathFunctions.GeometryFunctions.UWPolygonPixelator.polygon">
            <summary>
            This is the polygon that will be pixelated.
            </summary>
        </member>
        <member name="F:UW.MathFunctions.GeometryFunctions.UWPolygonPixelator.numBlocksX">
            <summary>
            Number of blocks in the x direction used to create the grid
            </summary>
        </member>
        <member name="F:UW.MathFunctions.GeometryFunctions.UWPolygonPixelator.numBlocksY">
            <summary>
            Number of blocks in the y direction used to create the grid
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygonPixelator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygonPixelator.#ctor(UW.MathFunctions.GeometryFunctions.UWPolygon,System.Int32,System.Int32)">
            <summary>
            User defined constructor.
            </summary>
            <param name="polygon"></param>
            <param name="numBlocksX"></param>
            <param name="numBlocksY"></param>
        </member>
        <member name="P:UW.MathFunctions.GeometryFunctions.UWPolygonPixelator.Polygon">
            <summary>
            This is the region which the distribution is integrated to.
            This property is a unique copy of the internally stored polygon.  It cannot be used to change the 
            state of the pixelator.
            </summary>
        </member>
        <member name="P:UW.MathFunctions.GeometryFunctions.UWPolygonPixelator.NumBlocksX">
            <summary>
            This is the number of blocks in the x direction.
            These blocks are used to discretize the polygon region.
            The higher number of blocks yields a more accurate probability.
            But having a low number of blocks yields very conservative estimations.
            </summary>
        </member>
        <member name="P:UW.MathFunctions.GeometryFunctions.UWPolygonPixelator.NumBlocksY">
            <summary>
            This is the number of blocks in the y direction.
            These blocks are used to discretize the polygon region.
            The higher number of blocks yields a more accurate probability.
            But having a low number of blocks yields very conservative estimations.
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygonPixelator.TransformPolygonToPixels">
            <summary>
            This method takes a polygon and discritizes it into RectangularCells.  It returns a UWGridPolygon object which contains
            RectangularCells that contains all of the polygon and is an overestimation of the polygon's area.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygonPixelator.calcBoxAroundPolygon">
            <summary>
            This determines the box's size that contains the rotated and translated polygon domain
            </summary>
            <returns>4x1 vector in the following order maxX, minX, maxY, minY</returns>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWPolygonPixelator.calcGridsContPolygon(UW.MathFunctions.UWMatrix,UW.MathFunctions.UWMatrix,System.Double,System.Double)">
             <summary>
             Calculates which grids contains the polygon.  The algorithm is designed to start at the bottom left corner of the box and moving to the right along the bottom row.
             Once the bottom right corner is reached, it will proceed to the second from the bottom row on the far left column and move to the right.  
             It will continue doing this until it reaches the top row and ends at the top right corner.
             
             The output is a list within a list of four points.  The overall list is the list of each grid, the sublists contains the four corners of each individual grid.
             
            pt1 is the bottom left corner of each individual grid. pt2 is the top left corner of each individual grid. pt 3 is the top right corner of each individual grid
            and pt 4 is the bottom right corner of each individual grid.
             
             </summary>
             <param name="xGrid">Monotonically increasing vectors from xMin to xMax with a step size of xStep</param>
             <param name="yGrid">Monotonically increasing vectors from yMin to yMax with a step size of yStep</param>
             <param name="xStep"></param>
             <param name="yStep"></param>
             <returns></returns>
        </member>
        <member name="T:UW.MathFunctions.GeometryFunctions.UWEllipse">
            <summary>
            Represent a simple, lightweight ellipse.
            </summary>
        </member>
        <member name="F:UW.MathFunctions.GeometryFunctions.UWEllipse.semiMajorAxis">
            <summary>
            See SemiMajorAxis property for more information
            </summary>
        </member>
        <member name="F:UW.MathFunctions.GeometryFunctions.UWEllipse.semiMinorAxis">
            <summary>
            See SemiMinorAxis property for more information
            </summary>
        </member>
        <member name="F:UW.MathFunctions.GeometryFunctions.UWEllipse.centroid">
            <summary>
            See Centroid property for more information
            </summary>
        </member>
        <member name="F:UW.MathFunctions.GeometryFunctions.UWEllipse.rotationAngle">
            <summary>
            See RotationAngle property for more information
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWEllipse.#ctor">
            <summary>
            Construct a default object.
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWEllipse.#ctor(System.Double,System.Double,System.Windows.Point,UW.Utilities.Units.UWAngle)">
            <summary>
            Construct from the specified inputs
            </summary>
            <param name="semiMajorAxis"></param>
            <param name="semiMinorAxis"></param>
            <param name="centroid"></param>
            <param name="rotationAngle"></param>
        </member>
        <member name="P:UW.MathFunctions.GeometryFunctions.UWEllipse.SemiMajorAxis">
            <summary>
            The length of the semi-major axis of the ellipse.  
            This is the distance from the centroid to the long side of the ellipse.
            This is half of the ellipse "length"
            </summary>
        </member>
        <member name="P:UW.MathFunctions.GeometryFunctions.UWEllipse.SemiMinorAxis">
            <summary>
            The length of the semi-minor axis of the ellipse.  
            This is the distance from the centroid to the short side of the ellipse.
            This is half of the ellipse "width"
            </summary>
        </member>
        <member name="P:UW.MathFunctions.GeometryFunctions.UWEllipse.Centroid">
            <summary>
            The (x,y) coordinate of the centroid of the ellipse
            </summary>
        </member>
        <member name="P:UW.MathFunctions.GeometryFunctions.UWEllipse.RotationAngle">
            <summary>
            The angle between the semi-major axis of the ellipse and the x axis.
            Positive is about the z axis (counter-clockwise).
            </summary>
        </member>
        <member name="P:UW.MathFunctions.GeometryFunctions.UWEllipse.a">
            <summary>
            Another name for SemiMajorAxis
            </summary>
        </member>
        <member name="P:UW.MathFunctions.GeometryFunctions.UWEllipse.b">
            <summary>
            Another name for SemiMinorAxis
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWEllipse.EllipsePoints(System.UInt32)">
            <summary>
            Returns a list of points which make up the boundary of the ellipse.
            </summary>
            <param name="numPoints">number of points on the ellipse</param>
            <returns></returns>
        </member>
        <member name="T:UW.MathFunctions.GeometryFunctions.UWEllipse3D">
            <summary>
            Represent a ellipse with a height and possible z value
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWEllipse3D.#ctor">
            <summary>
            Creates a default 3D Ellipse
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWEllipse3D.#ctor(System.Double,System.Double,System.Double,System.Windows.Media.Media3D.Point3D,UW.Utilities.Units.UWAngle)">
            <summary>
            Construct from the specified inputs
            </summary>
            <param name="semiMajorAxis">The length of the semi-major axis of the ellipse.  This is the distance from the centroid to the long side of the ellipse.  This is half of the ellipse "length"</param>
            <param name="semiMinorAxis">The length of the semi-minor axis of the ellipse.  This is the distance from the centroid to the short side of the ellipse.  This is half of the ellipse "width"</param>
            <param name="height">The total height of the volume (from top to bottom).  Note that this is NOT a half distance like the SemiMajorAxis and SemiMinorAxis.</param>
            <param name="centroid"></param>
            <param name="rotationAngle"></param>
        </member>
        <member name="P:UW.MathFunctions.GeometryFunctions.UWEllipse3D.Height">
            <summary>
            The total height of the volume (from top to bottom).
            Note that this is NOT a half distance like the SemiMajorAxis and SemiMinorAxis.
            </summary>
        </member>
        <member name="P:UW.MathFunctions.GeometryFunctions.UWEllipse3D.Centroid">
            <summary>
            The (x,y,z) coordiate of the centroid of the ellipse.
            </summary>
        </member>
        <member name="T:UW.MathFunctions.GeometryFunctions.UWLineInterval">
            <summary>
            Represent an interval in the range [Min, Max].  This can be visualized as a segment on a real line between the values of Min and Max.
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWLineInterval.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:UW.MathFunctions.GeometryFunctions.UWLineInterval.#ctor(System.Double,System.Double)">
            <summary>
            Construct from the specified inputs
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="P:UW.MathFunctions.GeometryFunctions.UWLineInterval.Min">
            <summary>
            The minimum value of the line interval
            </summary>
        </member>
        <member name="P:UW.MathFunctions.GeometryFunctions.UWLineInterval.Max">
            <summary>
            The maximum value of the interval
            </summary>
        </member>
        <member name="T:UW.MathFunctions.LinearAlgebra.MatrixMath">
            <summary>
            Various functions to perform operations on matrices.
            
            For additional functionality, see the UWMatrix class
            </summary>
        </member>
        <member name="M:UW.MathFunctions.LinearAlgebra.MatrixMath.Eigenvalues2By2Matrix(UW.MathFunctions.UWMatrix)">
            <summary>
            Computes the eigenvalues of a 2x2 matrix and returns the two eigenvalues in a List.
            
            If the eigenvalues are real, then the first element of the returned List is the more positive of the two eigenvalues.
            
            If the eigenvalues are a complex conjugate pair, then the first element of the returned List is the one with 
            the positive imaginary part and the second element of the returned list is the one with the negative imaginary part.
            </summary>
            <param name="A"></param>
            <returns>list of 2 eigenvalues</returns>
        </member>
        <member name="M:UW.MathFunctions.LinearAlgebra.MatrixMath.IsPositiveDefinite2By2Matrix(UW.MathFunctions.UWMatrix)">
            <summary>
            Checks if the specified 2x2 matrix is positive definite.  Note that the matrix must be symmetric.
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="T:UW.MathFunctions.Optimization.OptimizationResults">
            <summary>
            Object to represent the results of a numerical optimization run.
            </summary>
        </member>
        <member name="T:UW.MathFunctions.Optimization.OptimizationResults.ExitFlagEnum">
            <summary>
            Used to describe why the optimization routine exited and therefore can be used to interpret what these results mean (ie did the algorithm exceed the max number of steps and therefore, this is not actually an optimal solution).
            </summary>
        </member>
        <member name="F:UW.MathFunctions.Optimization.OptimizationResults.ExitFlagEnum.Converged">
            <summary>
            optimization converges to a solution
            </summary>
        </member>
        <member name="F:UW.MathFunctions.Optimization.OptimizationResults.ExitFlagEnum.MaxStepsExceeded">
            <summary>
            optimization takes too many steps
            </summary>
        </member>
        <member name="F:UW.MathFunctions.Optimization.OptimizationResults.ExitFlagEnum.UnableToComputeStepSize">
            <summary>
            optimization cannot compute the step size
            </summary>
        </member>
        <member name="F:UW.MathFunctions.Optimization.OptimizationResults.ExitFlagEnum.Undetermined">
            <summary>
            unknown problem with routine
            </summary>
        </member>
        <member name="M:UW.MathFunctions.Optimization.OptimizationResults.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:UW.MathFunctions.Optimization.OptimizationResults.#ctor(UW.MathFunctions.Optimization.OptimizationResults.ExitFlagEnum,System.Collections.Generic.List{UW.MathFunctions.UWMatrix},System.Collections.Generic.List{System.Double})">
            <summary>
            Construct from the specified inputs
            </summary>
            <param name="exitFlag"></param>
            <param name="points"></param>
            <param name="fval"></param>
        </member>
        <member name="P:UW.MathFunctions.Optimization.OptimizationResults.XStar">
            <summary>
            The optimal point.  
            
            Note: This may not actually be a local minima of the function.  
            You should check the state of the ExitFlag property (if it is not 'Converged', then the algorithm did not converge to a local minima)
            </summary>
        </member>
        <member name="P:UW.MathFunctions.Optimization.OptimizationResults.ExitFlag">
            <summary>
            The reason why the algorithm terminated
            </summary>
        </member>
        <member name="P:UW.MathFunctions.Optimization.OptimizationResults.X_k_sequence">
            <summary>
            The points that the numerical optimization routine takes.  This is a unique copy.
            </summary>
        </member>
        <member name="P:UW.MathFunctions.Optimization.OptimizationResults.X_k_sequence_as_UWMatrix">
            <summary>
            The points that the numerical optimization routine takes.
            
            This horizontally concatenates all the points into a single UWMatrix.
            
                [x0 x1 x2 ... xN]
                
            Note that accessing this property may take a long time.
            </summary>
        </member>
        <member name="P:UW.MathFunctions.Optimization.OptimizationResults.Fx_k_sequence">
            <summary>
            The objective function value at each step.  This is a unique copy.
            </summary>
        </member>
        <member name="P:UW.MathFunctions.Optimization.OptimizationResults.Fx_k_sequence_as_UWMatrix">
            <summary>
            The objective function value at each step. 
            
            This horizontally concatenates all the points into a single UWMatrix.
            
                [f(x0) f(x1) f(x2) ... f(xN)]
                
            Note that accessing this property may take a long time.
            </summary>
        </member>
        <member name="T:UW.MathFunctions.Optimization.ExhaustiveSearch">
            <summary>
            Optimization engine to perform an exhaustive search for a minimizer over a finite cardinality feasible set.
            </summary>
        </member>
        <member name="M:UW.MathFunctions.Optimization.ExhaustiveSearch.#ctor">
            <summary>
            Default contructor
            </summary>
        </member>
        <member name="M:UW.MathFunctions.Optimization.ExhaustiveSearch.#ctor(System.Func{UW.MathFunctions.UWMatrix,System.Double},System.Collections.Generic.List{UW.MathFunctions.UWMatrix})">
            <summary>
            Construct from the specified inputs
            </summary>
            <param name="f"></param>
            <param name="feasibleSet">all possible candidates in the feasible set</param>
        </member>
        <member name="M:UW.MathFunctions.Optimization.ExhaustiveSearch.#ctor(System.Func{UW.MathFunctions.UWMatrix,System.Double},UW.MathFunctions.UWMatrix)">
            <summary>
            Construct from the specified inputs
            </summary>
            <param name="f"></param>
            <param name="feasibleSet">should be a fat matrix where each column of the matrix is considered a candidate minimizer</param>
        </member>
        <member name="M:UW.MathFunctions.Optimization.ExhaustiveSearch.Optimize">
            <summary>
            Exhaustively search over the feasible set to find the minimum.
            </summary>
            <returns></returns>
        </member>
        <member name="T:UW.MathFunctions.Optimization.OptimizationSettingsUnconstrained">
            <summary>
            Settings for performing unconstrained optimization
            </summary>
        </member>
        <member name="M:UW.MathFunctions.Optimization.OptimizationSettingsUnconstrained.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:UW.MathFunctions.Optimization.OptimizationSettingsUnconstrained.#ctor(System.Int32,System.Double)">
            <summary>
            Construct from the specified inputs
            </summary>
            <param name="maxSteps"></param>
            <param name="delf_tolerance"></param>
        </member>
        <member name="P:UW.MathFunctions.Optimization.OptimizationSettingsUnconstrained.MaxSteps">
            <summary>
            The maximum number of steps that the algorithm will take.
            </summary>
        </member>
        <member name="P:UW.MathFunctions.Optimization.OptimizationSettingsUnconstrained.Delf_tolerance">
            <summary>
            If the norm of the gradient of the function is less than this value, then terminate the algorithm.
            </summary>
        </member>
        <member name="T:UW.MathFunctions.Optimization.UnconstrainedGradientDescent">
            <summary>
            Optimization engine to perform simple, unconstrained optimization using the gradient descent algorithm.
            
            This uses the Armijo rule to compute the step size.
            
            For more information, see Bertsekas, Dimitri P. "Nonlinear Programming 2nd Ed", pg. 25.
            </summary>
        </member>
        <member name="M:UW.MathFunctions.Optimization.UnconstrainedGradientDescent.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:UW.MathFunctions.Optimization.UnconstrainedGradientDescent.#ctor(System.Func{UW.MathFunctions.UWMatrix,System.Double},System.Func{UW.MathFunctions.UWMatrix,UW.MathFunctions.UWMatrix},UW.MathFunctions.Optimization.ArmijoRule,UW.MathFunctions.Optimization.OptimizationSettingsUnconstrained)">
            <summary>
            Construct from the specified inputs
            </summary>
            <param name="f"></param>
            <param name="del_f"></param>
            <param name="stepSizeCalculator"></param>
            <param name="settings"></param>
        </member>
        <member name="M:UW.MathFunctions.Optimization.UnconstrainedGradientDescent.step(UW.MathFunctions.UWMatrix)">
            <summary>
            Attempts to take a single step
            </summary>
            <param name="x_k"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.Optimization.UnconstrainedGradientDescent.Optimize(UW.MathFunctions.UWMatrix)">
            <summary>
            Attempts to optimize using a gradient descent algorithm.
            </summary>
            <param name="x_0"></param>
            <returns></returns>
        </member>
        <member name="T:UW.MathFunctions.Optimization.ArmijoRule">
            <summary>
            Used to compute the step size using the Armijo rule.  
            
            For more information, see Bertsekas, Dimitri P. "Nonlinear Programming 2nd Ed", pg. 29.
            </summary>
        </member>
        <member name="M:UW.MathFunctions.Optimization.ArmijoRule.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:UW.MathFunctions.Optimization.ArmijoRule.#ctor(System.Func{UW.MathFunctions.UWMatrix,System.Double},System.Func{UW.MathFunctions.UWMatrix,UW.MathFunctions.UWMatrix},System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Construct from the specified inputs
            </summary>
            <param name="f"></param>
            <param name="del_f"></param>
            <param name="s"></param>
            <param name="beta"></param>
            <param name="sigma"></param>
            <param name="maxIterations"></param>
        </member>
        <member name="P:UW.MathFunctions.Optimization.ArmijoRule.S">
            <summary>
            Parameter S
            </summary>
        </member>
        <member name="P:UW.MathFunctions.Optimization.ArmijoRule.Beta">
            <summary>
            Parameter Beta
            </summary>
        </member>
        <member name="P:UW.MathFunctions.Optimization.ArmijoRule.Sigma">
            <summary>
            Parameter Sigma
            </summary>
        </member>
        <member name="P:UW.MathFunctions.Optimization.ArmijoRule.MaxIterations">
            <summary>
            The maximum number of iterations to attempt to find a step size
            </summary>
        </member>
        <member name="P:UW.MathFunctions.Optimization.ArmijoRule.IsValid">
            <summary>
            Property to check if the object is valid or not
            </summary>
        </member>
        <member name="M:UW.MathFunctions.Optimization.ArmijoRule.CalculateStepSize(UW.MathFunctions.UWMatrix,UW.MathFunctions.UWMatrix)">
            <summary>
            Compute the step size using the Armijo rule.  
            
            For more information, see Bertsekas, Dimitri P. "Nonlinear Programming 2nd Ed", pg. 29.
            </summary>
            <param name="x_k">current point (should be a column vector)</param>
            <param name="d_k">current descent direction (should be a column vector)</param>
            <returns></returns>
        </member>
        <member name="T:UW.MathFunctions.Optimization.NumericalGradient">
            <summary>
            Used to numerically calculate the gradient of a function
            </summary>
        </member>
        <member name="M:UW.MathFunctions.Optimization.NumericalGradient.ComputeGradient(System.Func{UW.MathFunctions.UWMatrix,System.Double},UW.MathFunctions.UWMatrix,UW.MathFunctions.UWMatrix)">
            <summary>
            Attempts to numerically compute the gradient of the function f at the point x.  
            
            This uses the specified pertubations of dx for each direction. For example, it perturbs in the x1 direction by dx[0] and perturbs in the xn direction by dx[n-1].
            </summary>
            <param name="f"></param>
            <param name="x">the point to compute the gradient (note that this is a column vector)</param>
            <param name="dx">pertubation vector (note that this is a row vector)</param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.Optimization.NumericalGradient.ComputeGradient(System.Func{UW.MathFunctions.UWMatrix,System.Double},UW.MathFunctions.UWMatrix)">
            <summary>
            Attempts to numerically compute the gradient of the function f at the point x.  
            
            This uses a small pertubation vector in each direction.
            </summary>
            <param name="f"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:UW.MathFunctions.Optimization.OptimizationException">
            <summary>
            Exception used for optimization problems
            </summary>
        </member>
        <member name="T:UW.MathFunctions.Optimization.OptimizationException.ExceptionReason">
            <summary>
            Reasons why the exception may be thrown
            </summary>
        </member>
        <member name="F:UW.MathFunctions.Optimization.OptimizationException.ExceptionReason.CouldNotCalculateStepSize">
            <summary>
            could not compute the step size
            </summary>
        </member>
        <member name="F:UW.MathFunctions.Optimization.OptimizationException.ExceptionReason.MaxIterationsExceeded">
            <summary>
            maximum number of iterations was exceeded
            </summary>
        </member>
        <member name="M:UW.MathFunctions.Optimization.OptimizationException.#ctor(System.String,UW.MathFunctions.Optimization.OptimizationException.ExceptionReason)">
            <summary>
            Construct from the specified inputs
            </summary>
            <param name="message"></param>
            <param name="exceptionReason"></param>
        </member>
        <member name="M:UW.MathFunctions.Optimization.OptimizationException.#ctor(System.String,System.Exception,UW.MathFunctions.Optimization.OptimizationException.ExceptionReason)">
            <summary>
            Construct from the specified inputs
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="exceptionReason"></param>
        </member>
        <member name="P:UW.MathFunctions.Optimization.OptimizationException.ExceptReason">
            <summary>
            The reason the exception was thrown
            </summary>
        </member>
        <member name="T:UW.MathFunctions.ProbabilityFunctions.GaussianRandomNumberGenerator">
            <summary>
            This class gives random samples of 1D and 2D gaussian distributions.
            It will be able to generate random numbers according to a Gaussian distibution
            </summary>
        </member>
        <member name="F:UW.MathFunctions.ProbabilityFunctions.GaussianRandomNumberGenerator.rand">
            <summary>
            This is the random variable used to create a random number between 0 and 1
            </summary>
        </member>
        <member name="F:UW.MathFunctions.ProbabilityFunctions.GaussianRandomNumberGenerator.internalSeed">
            <summary>
            A seed value that can be used to initialize the generator.  This is static so that new instances of a generator will return different values.
            </summary>
        </member>
        <member name="M:UW.MathFunctions.ProbabilityFunctions.GaussianRandomNumberGenerator.#ctor">
            <summary>
            Constructs a new random number generator.
            Note that two different generators built from this constructor will produce two different sequences of random values.
            If you require the same sequence of random values from two generators, use the version of the constructor that allows you specify the seed value.
            </summary>
        </member>
        <member name="M:UW.MathFunctions.ProbabilityFunctions.GaussianRandomNumberGenerator.#ctor(System.Int32)">
            <summary>
            Construct a generator using the specified seed value.  This is useful if you require repeatability for the generated sequence of values.
            </summary>
            <param name="seed">see for the generator</param>
        </member>
        <member name="M:UW.MathFunctions.ProbabilityFunctions.GaussianRandomNumberGenerator.FindNormal">
            <summary>
            This method will return a sample of a unit normal distribution.
            In other words, the returned value will be sampled from a gaussian distribution of mean 0 and 
            standard deviation of 1.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.ProbabilityFunctions.GaussianRandomNumberGenerator.Get1DRandomNormal(System.Double,System.Double)">
            <summary>
            This generates a sample drawn from a normal distribution with the specified mean and standard deviation.
            </summary>
            <param name="mean">double that represents the mean</param>
            <param name="stddev">double that represents the standard dev</param>
            <returns>returns a double the represents a random normal sample</returns>
        </member>
        <member name="M:UW.MathFunctions.ProbabilityFunctions.GaussianRandomNumberGenerator.Get2DRandomNormal(UW.MathFunctions.UWMatrix,UW.MathFunctions.UWMatrix)">
            <summary>
            This method will find a random sample of a 2D gaussian distribution. It will 
            take the covariance and a mean and will give a random 2D matrix as a result that
            will follow the given distribution.
            </summary>
            <param name="covariance">This is a 2x2 matrix that will represent the covariance</param>
            <param name="mean">This is a 2 x 1 matrix that represents the mean</param>
            <returns>This will return a 2 x 1 matrix that represents a random sample defined by 
                     the covariance and the mean</returns>
        </member>
        <member name="T:UW.MathFunctions.ProbabilityFunctions.GaussianDistribution">
            <summary>
            Describes a one dimensional Gaussian/Normal probability distribution function
            </summary>
        </member>
        <member name="M:UW.MathFunctions.ProbabilityFunctions.GaussianDistribution.#ctor">
            <summary>
            Construct a distribution with mean 0 and variance of 2.
            </summary>
        </member>
        <member name="M:UW.MathFunctions.ProbabilityFunctions.GaussianDistribution.#ctor(System.Double,System.Double)">
            <summary>
            Construct a distribution with specified mean and specified variance.
            </summary>
            <param name="mean"></param>
            <param name="variance"></param>
        </member>
        <member name="P:UW.MathFunctions.ProbabilityFunctions.GaussianDistribution.Mean">
            <summary>
            The mean of the distribution
            </summary>
        </member>
        <member name="P:UW.MathFunctions.ProbabilityFunctions.GaussianDistribution.Variance">
            <summary>
            The variance of the distribution.  
            Note that this is NOT the standard deviation.  The variance is the standard deviation squared.
            </summary>
        </member>
        <member name="P:UW.MathFunctions.ProbabilityFunctions.GaussianDistribution.standardDeviation">
            <summary>
            The standard deviation of the distribution.  Note that this is read only, to set this value, you need to set the Variance property.
            </summary>
        </member>
        <member name="M:UW.MathFunctions.ProbabilityFunctions.GaussianDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Compute the cumulative distribution function, F(x), of the gaussian probability distribution function, f(x).
            This computes
            
                F(x) = integral from 0 to x of f(x)
                
            Which can be interpreted as the probability that a sample will fall within the range [0, x].
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.ProbabilityFunctions.GaussianDistribution.IntegrateDistribution(System.Double,System.Double)">
            <summary>
            Integrates the gaussian distribution between xMin and xMax.  
            This is equivalent to the probability that a sample will fall between xMin and xMax
            </summary>
            <param name="xMin"></param>
            <param name="xMax"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.ProbabilityFunctions.GaussianDistribution.ConfidenceIntervalFromMean(System.Double)">
            <summary>
            Computes the distance from the mean that will capture the specified probabilityInInterval samples from this distribution.
            
            For example, if probabilityInInterval = 0.65 then this computes the distance, d, from the 
            mean that will capture 65% of samples drawn from this distribution (x in [mean - d, mean + d] is the interval).
            
            See also ConfidenceInterval
            
            http://en.wikipedia.org/wiki/Normal_distribution#Standard_deviation_and_tolerance_intervals
            </summary>
            <param name="probabilityInInterval">probability that a sample drawn from this distribution will fall in the interval x in [mu - d, mu + d].  This should be in the range (0, 1)</param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.ProbabilityFunctions.GaussianDistribution.ConfidenceInterval(System.Double)">
            <summary>
            Computes the interval centered at the mean that will capture the specified probabilityInInterval samples from this distribution.
            
            See also ConfidenceIntervalFromMean
            </summary>
            <param name="probabilityInInterval"></param>
            <returns></returns>
        </member>
        <member name="T:UW.MathFunctions.ProbabilityFunctions.GaussianDistribution2D">
            <summary>
            Describes a two dimensional Gaussian/Normal probability distribution function
            </summary>
        </member>
        <member name="M:UW.MathFunctions.ProbabilityFunctions.GaussianDistribution2D.#ctor">
            <summary>
            Construct a distribution with mean [0; 0] and diagonal covariance matrix with 2 and 4 on the diagonal.
            </summary>
        </member>
        <member name="M:UW.MathFunctions.ProbabilityFunctions.GaussianDistribution2D.#ctor(UW.MathFunctions.UWMatrix,UW.MathFunctions.UWMatrix)">
            <summary>
            Construct a distribution with specified mean and specified covariance matrix.
            </summary>
            <param name="mean"></param>
            <param name="covarianceMatrix">covariance matrix: must be symmetric and positive definite</param>
        </member>
        <member name="P:UW.MathFunctions.ProbabilityFunctions.GaussianDistribution2D.Mean">
            <summary>
            The mean of the distributions.  This should be a 2x1 matrix.
            </summary>
        </member>
        <member name="P:UW.MathFunctions.ProbabilityFunctions.GaussianDistribution2D.CovarianceMatrix">
            <summary>
            The covariance matrix.  In a 1D case, this is the variance of the distribution.
            This should be a 2x2 symmetric, positive definite matrix.
            </summary>
        </member>
        <member name="P:UW.MathFunctions.ProbabilityFunctions.GaussianDistribution2D.maxEigenvalue">
            <summary>
            Maximum eigenvalue of the covariance matrix.
            </summary>
        </member>
        <member name="P:UW.MathFunctions.ProbabilityFunctions.GaussianDistribution2D.minEigenvalue">
            <summary>
            Minimum eigenvalue of the covariance matrix.
            </summary>
        </member>
        <member name="M:UW.MathFunctions.ProbabilityFunctions.GaussianDistribution2D.ApproximatelyEqual(UW.MathFunctions.ProbabilityFunctions.GaussianDistribution2D,System.Double)">
            <summary>
            Checks if this object is approximately equal to the other object by value.
            This means that all fields are equal to the other within the specified tolerance.
            </summary>
            <param name="other"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.ProbabilityFunctions.GaussianDistribution2D.SemiMajorAxisAngleFromXAxis">
            <summary>
            Computes the angle from the x axis to the semi-major axis of the distribution.
            
            If the distribution is circular and therefore has no semi-major axis defined, this returns 0.
            
            See 'Theorem: Angle theta Associated with a Distribution' in Gaussian Distribution Lecture.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.ProbabilityFunctions.GaussianDistribution2D.IntegrateDiagonalDistribution(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Integrates the distribution with a diagonal covariance matrix over the rectangle defined by 
            x1 in [x1Min, x1Max] and x2 in [x2Min, x2Max].
            </summary>
            <param name="x1Min"></param>
            <param name="x1Max"></param>
            <param name="x2Min"></param>
            <param name="x2Max"></param>
            <returns>integral of the distribution</returns>
        </member>
        <member name="M:UW.MathFunctions.ProbabilityFunctions.GaussianDistribution2D.LevelSet(System.Double)">
            <summary>
            Computes the level set of the distribution at the specified height.
            
            See GaussianDistribution2D.nb for more information
            </summary>
            <param name="height">desired level set height in the range of (0, hMax)</param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.ProbabilityFunctions.GaussianDistribution2D.ConfidenceEllipse(System.Double)">
            <summary>
            Computes the level set ellipse which has the property that the distribution integrated over this ellipse is equal to the specified probabilityInEllipse.
            
            This is a confidence interval in the sense that the returned ellipse captures the specified fraction of samples which are drawn from this distribution.
            
            A typical use case scenario is where the user would like to determine the ellipse which captures the specified fraction of samples which are drawn from this distribution.
            
            A sample which is randomly drawn from this distribution has a probabilty equal to probabilityInEllipse of falling within the returned ellipse.
            
            For more information, see GaussianDistribution2D.nb.
            </summary>
            <param name="probabilityInEllipse">desired probability in range (0,1)</param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.ProbabilityFunctions.GaussianDistribution2D.DeepCopy">
            <summary>
            This is a deep copy of the object.  This is a unique object, thus changing the copy does not affect the reference and vice versa.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.ProbabilityFunctions.GaussianDistribution2D.RotateCovarianceMatrix(UW.MathFunctions.UWMatrix,UW.Utilities.Units.UWAngle)">
            <summary>
            Rotate a covariance matrix by the angle theta about the x3 = z axis.  See Notes/GaussianDistribution2D.nb for more information.
            </summary>
            <param name="sigma">original covariance matrix</param>
            <param name="theta">angle to rotate</param>
            <returns></returns>
        </member>
        <member name="T:UW.MathFunctions.ProbabilityFunctions.Probability">
            <summary>
            Various functions for probability and statistics
            </summary>
        </member>
        <member name="M:UW.MathFunctions.ProbabilityFunctions.Probability.Erf(System.Double)">
            <summary>
            Returns the error function evalulated at x.  The error function is defined as
            
            Erf(x) = 2/sqrt(pi) * integral from 0 to x of exp(-t^2) dt
            
            For more information, see Abramowitz and Stegun, Handbook of Mathematical Functions, sec. 7.1.
            </summary>
            <param name="x">value to evaluate the error function at</param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.ProbabilityFunctions.Probability.ErfInv(System.Double)">
            <summary>
            Returns the inverse error function evaluated at y.  
            The inverse error function satisfies y = Probability.Erf(x) for y in (-1, 1) and x in (-inf, +inf).
            </summary>
            <param name="y">y in range (-1, 1)</param>
            <returns>x</returns>
        </member>
        <member name="M:UW.MathFunctions.ProbabilityFunctions.Probability.Probit(System.Double)">
            <summary>
            Computes the probit function which is the quantile function associated with the standard normal distribution.
            http://en.wikipedia.org/wiki/Probit_function
            
            This is implemented using an algorithm developed by Peter J. Acklam for computing the inverse normal cumulative distribution function.
            http://home.online.no/~pjacklam/notes/invnorm/
            </summary>
            <param name="p">probability in the range of (0, 1)</param>
            <returns>z</returns>
        </member>
        <member name="M:UW.MathFunctions.ProbabilityFunctions.Probability.Mean(System.Collections.Generic.List{System.Double})">
            <summary>
            Computes the mean of the samples.
            </summary>
            <param name="samples"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.ProbabilityFunctions.Probability.Variance(System.Collections.Generic.List{System.Double})">
            <summary>
            Computes the variance of the samples.  Note that this uses the formulation
            
                variance = (1/n)*sum(x_j - mu) for j=1,2,...,N
            
            where n = number of samples
                  mu = mean of the samples
            </summary>
            <param name="samples"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.ProbabilityFunctions.Probability.StandardDeviation(System.Collections.Generic.List{System.Double})">
            <summary>
            Computes the standard deviation of the samples.  This is simply the square root of the variance.
            See Probability.Variance for more details on how the variance is calculated.
            </summary>
            <param name="samples"></param>
            <returns></returns>
        </member>
        <member name="T:UW.MathFunctions.InterpolationExtrapMethods">
            <summary>
            Different ways to perform extrapolation
            </summary>
        </member>
        <member name="F:UW.MathFunctions.InterpolationExtrapMethods.ExtrapolationNotAllowed">
            <summary>
            Do not allow extrapolation
            </summary>
        </member>
        <member name="F:UW.MathFunctions.InterpolationExtrapMethods.Linear">
            <summary>
            Linear extrapolation
            </summary>
        </member>
        <member name="F:UW.MathFunctions.InterpolationExtrapMethods.HoldEndPoints">
            <summary>
            End point values of held constant
            </summary>
        </member>
        <member name="T:UW.MathFunctions.UWFunctionsMath">
            <summary>
            A class to perform various math operations.  
            
            These functions should operate on simple data types.  
            
            Functions which use more complicated data types (such as UWMatrix) are most likely
            included in those data type's class definition.
            </summary>
        </member>
        <member name="M:UW.MathFunctions.UWFunctionsMath.DetermineNiceDeliniationsBetweenValues(System.Double,System.Double,System.Int32)">
            <summary>
            Determines deliniations which are approximately round numbers and within the range [valMin, valMax].  There should be approximately numDeliniations in the returned list (usually +/- 1)
            
            For example, if the range of numbers is between [-11.4, 2.23] and numDeliniations = 7, this function might compute deliniations of [-10 -8 -6 -4 -2 0 2].
            </summary>
            <param name="valMin"></param>
            <param name="valMax"></param>
            <param name="numDeliniations"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWFunctionsMath.Interp1(System.Double,System.Double,System.Double,System.Double,System.Double,UW.MathFunctions.InterpolationExtrapMethods)">
            <summary>
            Performs 1D interpolation (table lookup) to find yi, the value corresponding to xi.
            </summary>
            <param name="x1"></param>
            <param name="x2"></param>
            <param name="y1"></param>
            <param name="y2"></param>
            <param name="xi"></param>
            <param name="extrapMethod"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWFunctionsMath.MinimizeAngle(System.Double,System.Boolean)">
            <summary>
            Returns an equivalent angle in the range (-pi,pi].
            </summary>
            <param name="theta">angle (radians)</param>
            <param name="alternateRange">set to true to denote that the output range should be in range [0,2*pi)</param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWFunctionsMath.DetermineOrderOfMagnitude(System.Double)">
            <summary>
            Determines the order of magnitude of the value.  For example, 
            
            value   returned value
            0.02    0.01
            0.12    0.1
            4.3     1.0
            19.99   10.0
            562     100.0
            
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWFunctionsMath.FloorToSpecifiedSignificantFigure(System.Double,System.Int32)">
            <summary>
            Floors the specified value to the specified significant figure.  If significantFigures = 0, then this acts as the standard Math.Floor function.
            Positive significantFigure values imply that the flooring takes place after the decimal point.  Negative values imply that the flooring takes place before the decimal place.
            
            d           significantFigures  returned value
            1234.2345   0                   1234
            1234.2345   1                   1234.2
            1234.2345   3                   1234.234
            1234.2345   -2                  1200
            -1234.2345  0                   -1235
            -1234.2345  1                   -1234.3
            -1234.2345  -2                  -1300
            </summary>
            <param name="d"></param>
            <param name="significantFigures"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWFunctionsMath.SquareDouble(System.Double)">
            <summary>
            Square a value (i.e. returns val^2)
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWFunctionsMath.Rand2(System.Double,System.Double)">
            <summary>
            Return a random number between the specified lowerBound upperBound.
            </summary>
            <param name="lowerBound"></param>
            <param name="upperBound"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWFunctionsMath.YInterceptFromPointSlope(System.Double,System.Double,System.Double)">
            <summary>
            Calculate the y intercept of the line from a point and slope information.
            </summary>
            <param name="slope">slope of line</param>
            <param name="x">x coordinate of point</param>
            <param name="y">y coordinate of point</param>
            <returns>y intercept of line</returns>
        </member>
        <member name="M:UW.MathFunctions.UWFunctionsMath.OverlapOnRealLine(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Consider two segments on the real line A (defined by A1 and A2) and B (defined by B1 and B2).  
            This computes the start and end point of the overlap of the two segements.
            
            For more information, see Notes/UWFunctionsMath.ppt.
            </summary>
            <param name="A1"></param>
            <param name="A2"></param>
            <param name="B1"></param>
            <param name="B2"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWFunctionsMath.RadiansToDegrees(System.Double)">
            <summary>
            Convert radians to degrees.
            </summary>
            <param name="radians"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWFunctionsMath.DegreesToRadians(System.Double)">
            <summary>
            Convert degrees to radians.
            </summary>
            <param name="degrees"></param>
            <returns></returns>
        </member>
        <member name="T:UW.MathFunctions.UWFunctionsVectorMechanics">
            <summary>
            Various methods for performing vector mechanics operations
            </summary>
        </member>
        <member name="M:UW.MathFunctions.UWFunctionsVectorMechanics.DotProduct(System.Double[],System.Double[])">
            <summary>
            Computes the dot product between two arrays/vectors.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWFunctionsVectorMechanics.AngleBetweenVectors(System.Double[],System.Double[])">
            <summary>
            Computes the angle between two vectors.  Note that the angle returned is always less than or equal to pi.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWFunctionsVectorMechanics.VectorMagnitude(System.Double[])">
            <summary>
            Returns the magnitude of the vector/array a.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWFunctionsVectorMechanics.CrossProduct(System.Double[],System.Double[])">
            <summary>
            Computes the cross product
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWFunctionsVectorMechanics.ClockAngleBetweenVectors(System.Double[],System.Double[])">
            <summary>
            Computes the clock angle between the two, 2D vectors a and b.  This is defined as the angle that a must be rotated in the clockwise direction to get vector a to line up with vector b.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWFunctionsVectorMechanics.AzimuthAndElevationAnglesToVector(System.Double[],System.Double@,System.Double@)">
            <summary>
            Computes the azimuth angle and elevation angle to the vector
            
            NOTE: METHOD IS NOT CURRENTLY USED IN PROJECTS (CHECK CALL HEIRARCHY)
            </summary>
            <param name="a"></param>
            <param name="azimuthAngle"></param>
            <param name="elevationAngle"></param>
        </member>
        <member name="M:UW.MathFunctions.UWFunctionsVectorMechanics.ProjectPointOntoLineSegment(System.Windows.Media.LineGeometry,System.Windows.Point)">
            <summary>
            Computes the point on the segment which is closest to the specified point.
            </summary>
            <param name="segment"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWFunctionsVectorMechanics.UnitVectorFromStartToEndPoint(System.Windows.Point,System.Windows.Point)">
            <summary>
            Computes the unit vector pointing from the startPoint towards the endPoint
            </summary>
            <param name="startPoint"></param>
            <param name="endPoint"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWFunctionsVectorMechanics.UnitVector(System.Windows.Point)">
            <summary>
            Computes the unit vector equivalent of the 2D specified vector
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWFunctionsVectorMechanics.DistanceToSpecifiedPoint(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            If the specifiedPoint is on the line segment from startPoint to endPoint, this returns the distance
            from the startPoint to the specifiedPoint.  
            
            If the specifiedPoint is not on the line segment, this returns null.
            </summary>
            <param name="startPoint"></param>
            <param name="endPoint"></param>
            <param name="specifiedPoint"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="T:UW.MathFunctions.UWMatrix">
            <summary>
            Class representing a 2D matrix.
            </summary>
        </member>
        <member name="T:UW.MathFunctions.UWMatrix.InDoubleOutDoubleDelegate">
            <summary>
            Delegate with a double as input and output.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.#ctor">
            <summary>
            Default constructor.  This creates an empty matrix.
            </summary>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.#ctor(System.Double[0:,0:])">
            <summary>
            Construct from a 2D array.
            </summary>
            <param name="A">2D array</param>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.#ctor(UW.MathFunctions.UWMatrix)">
            <summary>
            Construct a new, unique object from an existing UWMatrix object.
            </summary>
            <param name="A">UWMatrix object</param>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.#ctor(UW.MathFunctions.UWMatrixCore)">
            <summary>
            Construct a new, unique object from an existing UWMatrixCore object.
            </summary>
            <param name="A">UWMatrixCore object</param>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct a zero matrix of the specified size.
            </summary>
            <param name="numRows"></param>
            <param name="numCols"></param>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.#ctor(System.Double)">
            <summary>
            Construct from a double.  The resulting object is a 1x1 matrix
            with value specified by the double.
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Construct from 3 doubles which specify the x, y, and z components of the resulting 3x1 vector.  The resulting object is a 3x1 vector of the form [x;y;z].
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="P:UW.MathFunctions.UWMatrix.NumRows">
            <summary>
            Read only property which represents the number of rows in the matrix.
            </summary>
        </member>
        <member name="P:UW.MathFunctions.UWMatrix.NumColumns">
            <summary>
            Read only property which represents the number of columns in the matrix.
            </summary>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.op_Addition(UW.MathFunctions.UWMatrix,UW.MathFunctions.UWMatrix)">
            <summary>
            Return a unique object C = A + B
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.op_Subtraction(UW.MathFunctions.UWMatrix,UW.MathFunctions.UWMatrix)">
            <summary>
            Return a unique object C = A - B
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.op_UnaryNegation(UW.MathFunctions.UWMatrix)">
            <summary>
            Return a unique object C = -A
            
            Example usage:
            
                UWMatrix B = -A;
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.op_Multiply(UW.MathFunctions.UWMatrix,UW.MathFunctions.UWMatrix)">
            <summary>
            Returns a unique object C = A*B
            
            Example usage:
            
                UWMatrix C = A * B;
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.op_Multiply(System.Double,UW.MathFunctions.UWMatrix)">
            <summary>
            Returns a unique object C = alpha*A (where alpha is a scalar double)
            
            Example usage:
            
                double alpha = 2.3;
                UWMatrix C = alpha * A;
            </summary>
            <param name="alpha"></param>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.op_Multiply(UW.MathFunctions.UWMatrix,System.Double)">
            <summary>
            Returns a unique object C = A*alpha (where alpha is a scalar double)
            
            Example usage:
            
                double alpha = 2.3;
                UWMatrix C =  A * alpha;
            </summary>
            <param name="alpha"></param>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="P:UW.MathFunctions.UWMatrix.Item(System.Int32)">
            <summary>
            Indexer to return and set a value at a specified index.  The matrix should be a 1D matrix.
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.AreMatricesEqualByValue(UW.MathFunctions.UWMatrix,UW.MathFunctions.UWMatrix,System.Double)">
            <summary>
            Determines if two matrices have the same values in each element.
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.ConvertDoubleToVerticalVectorWithRowColData(System.Double)">
            <summary>
            Returns a 3x1 object where the first two rows are equal
            to 1 and the third row is set to the input argument value.  This is
            to emulate the UWMatrix.ReturnAsVerticalVectorWithRowColData member
            function with scalars. 
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.ConvertIntToVerticalVectorWithRowColData(System.Int32)">
            <summary>
            Returns a 3x1 object where the first two rows are equal
            to 1 and the third row is set to the input argument value.  This is
            to emulate the UWMatrix.ReturnAsVerticalVectorWithRowColData member
            function with scalars. 
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.Diag(System.Collections.Generic.List{System.Double})">
            <summary>
            Creates a matrix with V along the main diagonal.
            </summary>
            <param name="V">elements to be placed along the main diagonoal</param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.Eye(System.Int32)">
            <summary>
            Creates an N-by-N identity matrix.
            </summary>
            <param name="N"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.Flipud(UW.MathFunctions.UWMatrix)">
            <summary>
            Return a matrix which is the input matrix flipped up/down (ie the last
            row of the input matrix is the first row of the return matrix, etc).
            Returns an empty matrix if error encountered.
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.Linspace(System.Double,System.Double,System.Int32)">
            <summary>
            Create a linearly spaced UWMatrix with first element of startValue, last element of endValue, and numElements elements.
            
            This returns a row vector.
            </summary>
            <param name="startValue"></param>
            <param name="endValue"></param>
            <param name="numElements"></param>
            <returns>row vector</returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.Length(UW.MathFunctions.UWMatrix)">
            <summary>
            Returns the length of the largest dimension of the matrix.  For 1D matrices, this is effectively the number of elements in the matrix.
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.MeshgridX(UW.MathFunctions.UWMatrix,UW.MathFunctions.UWMatrix)">
             <summary>
             Creates a matrix X with the same number of rows as the length of y and the
             same number of columns as the length of x.  This has the matrix x repeated
             down the rows.  Returns an empty matrix if error encountered.
            
             This function emulates the Matlab meshgrid function (but only returns the X matrix)
             </summary>
             <param name="x"></param>
             <param name="y"></param>
             <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.MeshgridY(UW.MathFunctions.UWMatrix,UW.MathFunctions.UWMatrix)">
             <summary>
             Creates a matrix Y with the same number of rows as the length of y and the
             same number of columns as the length of x.  This has the matrix y repeated
             across the columns.  Returns an empty matrix if error encountered.
            
             This function emulates the Matlab meshgrid function (but only returns the Y matrix)
             </summary>
             <param name="x"></param>
             <param name="y"></param>
             <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.SaturateVector(UW.MathFunctions.UWMatrix,System.Double)">
            <summary>
            Returns a copy of the input vector which has saturation applied.  This scales down the vector V to have a 2-norm
            equal to alpha if the vector is too long.  Otherwise, it leaves the vector unchanged.
            
            The returned vector is a unique object from the input argument.
            </summary>
            <param name="V"></param>
            <param name="alpha"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.ReadInFromFile(System.String,System.String,System.String)">
            <summary>
            See ReturnMatrixFromFile
            </summary>
            <param name="directoryFileString"></param>
            <param name="rowDeliniator"></param>
            <param name="colDeliniator"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.ReshapeListDoubleToUWMatrix(System.Collections.Generic.List{System.Double},System.Int32,System.Int32)">
            <summary>
            Given a List of double, vec, this reshapes this into a M-by-N UWMatrix.  
            The elements of vec are taken columnwise.
            </summary>
            <param name="vec">List object</param>
            <param name="M">number of rows</param>
            <param name="N">number of columns</param>
            <returns>reshaped list as a UWMatrix object</returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.ReshapeUWMatrixToListUWMatrixColumnwise(UW.MathFunctions.UWMatrix)">
            <summary>
            Reshapes the specified matrix to a list of column vectors. 
            
            In other words, each column of the matrix is taken out and added as an element of the List.
            </summary>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.ReturnAmnMatrix(System.Int32,System.Int32)">
            <summary>
            Return a matrix of size numRows by numCols where each element is set to a value defined by .SetAsAmnMatrix.
            
            See also SetAsAmnMatrix
            </summary>
            <param name="numRows">number of rows in matrix</param>
            <param name="numCols">number of cols in matrix</param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.ReturnMatrixFromFile(System.String,System.String,System.String)">
            <summary>
            Read in a matrix from a file.  
            </summary>
            <param name="directoryFileString"></param>
            <param name="rowDeliniator">optional parameter to specify how the rows in the file are deliniated</param>
            <param name="colDeliniator">optional parameter to specify how the cols in the file are deliniated</param>
            <returns>matrix from the file</returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.ReturnOnesMatrix(System.Int32,System.Int32)">
            <summary>
            Return a matrix of all ones of size numRows by numCols.
            </summary>
            <param name="numRows">number of rows in matrix</param>
            <param name="numCols">number of cols in matrix</param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.ReturnZeroMatrix(System.Int32,System.Int32)">
            <summary>
            Return a matrix of all zeros of size numRows by numCols.
            </summary>
            <param name="numRows">number of rows in matrix</param>
            <param name="numCols">number of cols in matrix</param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.ReturnZeroMatrix(UW.MathFunctions.UWMatrix)">
            <summary>
            Return a matrix of all zeros of the same dimension as the input matrix, X.
            </summary>
            <param name="X"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.AddMatrixToObject(UW.MathFunctions.UWMatrix)">
            <summary>
            Adds the matrix B to this item
            </summary>
            <param name="B"></param>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.ApplyMethodToEachElement(UW.MathFunctions.UWMatrix.InDoubleOutDoubleDelegate)">
            <summary>
            Apply the method which is hooked up to the delegate to each element of the matrix.  In other words,
            
                A[m,n] = f(A[m,n])
                
            Example useage
            
                UWMatrix myMatrix = ...
                UWMatrix.InDoubleOutDoubleDelegate func = new UWMatrix.InDoubleOutDoubleDelegate(Math.Sin);
                myMatrix.ApplyMethodToEachElement(func);
                
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.AreMatricesEqualByValue(UW.MathFunctions.UWMatrix,System.Double)">
            <summary>
            Determines if two matrices have the same values in each element.
            </summary>
            <param name="B"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.Hcat(UW.MathFunctions.UWMatrix)">
            <summary>
            Concatenate a matrix B onto the end of this matrix (using Matlab notation: A = [A B])
            </summary>
            <param name="B"></param>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.Hcat(System.Double)">
            <summary>
            Concatenate the double B horizontally onto the end of this matrix
            </summary>
            <param name="B"></param>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.IsColumnVector">
            <summary>
            Checks if the matrix is a column vector or not. 
            </summary>
            <returns>true if object is a column vector, false otherwise</returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.IsDiagonalMatrix(System.Double)">
            <summary>
            Checks if this is a diagonal matrix.  Al element is considered zero if it is within the specified tolerance.
            </summary>
            <param name="tolerance">tolerance for calling an element 0</param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.IsEmptyMatrix">
            <summary>
            Checks if both rows and columns of the matrix are equal to 0
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.IsGivenDimensions(System.Int32,System.Int32)">
            <summary>
            Checks if this matrix is the specified dimensions
            </summary>
            <param name="numRows">number of rows</param>
            <param name="numCols">number of cols</param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.IsOneDimensionalMatrix">
            <summary>
            Checks if the matrix has either 1 row or 1 column.  And empty matrix is not considered a one dimensional matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.IsSameDimension(UW.MathFunctions.UWMatrix)">
            <summary>
            Determines if the matrix B is the same dimension as this object
            </summary>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.IsRowVector">
            <summary>
            Checks if the matrix is a row vector or not.  
            </summary>
            <returns>true if object is a row vector, false otherwise</returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.IsSymmetric">
            <summary>
            Checks if the matrix is symmetric or not.
            </summary>
            <returns>true if matrix is symmetric, false otherwise</returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.MultiplyScalarToObject(System.Double)">
            <summary>
            Multiply elements of this matrix, A, by a scalar, x.  In other words
            
            A_mn = x*A_mn
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.PrintToFile(System.String)">
            <summary>
            Write the matrix to a file.  The format is what is specified by the ToString method.
            </summary>
            <param name="directoryFileString">directory and file name</param>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.SetAllMatrixElementsToSpecifiedValue(System.Double)">
            <summary>
            Set all elements of the matrix to the value x.
            </summary>
            <param name="x">value to set all matrix elements to</param>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.SetAsAmnMatrix">
            <summary>
            Sets each element of the matrix to the form row.column.  For example
            the element in the 3rd row, 15th column will have the value of 3.0015.  The maximum
            number of rows and columns is 9999.  
            </summary>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.ReturnMatrixApplyMethodToEachElement(UW.MathFunctions.UWMatrix.InDoubleOutDoubleDelegate)">
            <summary>
            Does the same as ApplyMethodToEachElement except this does not change the calling matrix and instead returns the result as a new, unique matrix.
            
            See ApplyMethodToEachElement for more information.
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.ReturnMultiplyScalarToObject(System.Double)">
            <summary>
            Multiply elements of this matrix, A, by a scalar, x.  In other words
            
            B_mn = x*A_mn
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.ReturnTranspose">
            <summary>
            Returns a matrix which is the same as this matrix but transposed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.Inverse">
            <summary>
            Returns a matrix which is the inverse of the given matrix. If the matrix
            is singular and therefore non-invertible then an exception will be thrown.
            </summary>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.ReturnAsVerticalVector">
             <summary>
             Reshape the matrix and return a vertical matrix which are the columns
             of the original matrix stacked on top of each other.  In other words,
             if the original matrix is M by N, then the returned matrix will be
             of size M*N by 1 and the first M rows will be the first column of
             the original matrix.  The M+1 to 2*M rows of the returned matrix will
             be the second column of the original matrix, etc.
            
             If the calling matrix is empty, the returned matrix will be empty as well.
             </summary>
             <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.ReturnAsVerticalVectorWithRowColData">
             <summary>
             Returns a vertical MyGSLMatrix where the first element is number of rows,
             the second element is the number of columns, and the third through last
             rows are the contents of the calling matrix stacked columnwise
             (ie returned by MyGSLMatrix::returnAsVerticalVector)
            
             If the calling matrix is empty, the returned matrix a 2x1 matrix of
             zeros (to represent zero row, zero columns, and then no data)
             </summary>
             <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.ReturnColumn(System.Int32)">
            <summary>
            Return a column of the matrix.  If the index is negative, this starts from the right side (-1 = last column, -2 = second to last column etc.)
            </summary>
            <param name="colIndex"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.ReturnMaximumValueInMatrix">
            <summary>
            Returns the maximum value found in the matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.ReturnMaximumValueInMatrix(System.Double,System.Double)">
            <summary>
            Returns the maximum value found in the matrix but excludes any value within the specified tolerance of the excludeValue
            from the calculation.
            
            If all values in the matrix are within the specified tolerance, this throws an exception (because in this case, the maximum is not defined).
            </summary>
            <param name="excludeValue"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.ReturnMinimumValueInMatrix">
            <summary>
            Returns the minimum value found in the matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.ReturnMinimumValueInMatrix(System.Double,System.Double)">
            <summary>
            Returns the minimum value found in the matrix but excludes any value within the specified tolerance of the excludeValue
            from the calculation.
            
            If all values in the matrix are within the specified tolerance, this throws an exception (because in this case, the minimum is not defined).
            </summary>
            <param name="excludeValue"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.ReturnNormalizedVector">
            <summary>
            Returns a vector which is the normalized version of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.ReturnNumberElementsInMatrix">
            <summary>
            Returns the number of elements in the matrix (basically the numRows*numCols).
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.ReturnRow(System.Int32)">
            <summary>
            Return a row of the matrix.  If the index is negative, this starts from the bottom (-1 = last row, -2 = second to last row etc.)
            </summary>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.ReturnSubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This returns the submatrix specified by rowIndex, colIndex, numRows, and numCols.  
            </summary>
            <param name="rowIndex">row index of upper left corner</param>
            <param name="colIndex">col index of upper left corner</param>
            <param name="numRows">number of rows in submatrix</param>
            <param name="numCols">number of cols in submatrix</param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.ReturnVector2Norm">
            <summary>
            Calculates the 2-norm of the vector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.SetSubmatrix(System.Int32,System.Int32,UW.MathFunctions.UWMatrix)">
            <summary>
            Sets the matrix B into the current matrix.  The top left of the matrix B is inserted at location rowIndex, colIndex.
            </summary>
            <param name="rowIndex"></param>
            <param name="colIndex"></param>
            <param name="B"></param>
            <returns>errorCode</returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.SubtractMatrixFromObject(UW.MathFunctions.UWMatrix)">
            <summary>
            Subtract the matrix B from this item.
            </summary>
            <param name="B"></param>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.SumMatrix">
            <summary>
            Returns the cumulative sum of the matrix (all the elements added together)
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.ToArray2D">
            <summary>
            Returns a 2D array representation of the matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.Vcat(System.Double)">
            <summary>
            Concatenate the double B vertically onto the end of this matrix.
            </summary>
            <param name="B"></param>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.doesColIndexExceedMatrixDimensions(System.Int32)">
            <summary>
            Check if the specified column index exceeds the dimensions of the matrix.
            </summary>
            <param name="colIndex"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.doesRowIndexExceedMatrixDimensions(System.Int32)">
            <summary>
            Check if the specified row index exceeds the dimensions of the matrix.
            </summary>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.GetSchema">
            <summary>
            As per Microsoft documentation, this should return null.
            
            http://msdn.microsoft.com/en-us/library/system.xml.serialization.ixmlserializable.getschema.aspx
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.ReadXml(System.Xml.XmlReader)">
            <summary>
            Read from an XML file.  This is intended to be used with XmlSerialization procedures.
            
            At method entry: reader should be positioned at a &lt;UWMatrix&gt; tag.  
            At method exit:  reader should be positioned just past the &lt;/UWMatrix&gt; tag.
            
            http://stackoverflow.com/questions/279534/proper-way-to-implement-ixmlserializable
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:UW.MathFunctions.UWMatrix.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Write this to an XML file.  This is intended to be used with XmlSerialization procedures, as such, it should be called by the framework and not by the client directly.
            
            Note that because this is part of the IXmlSerializable interface, the framework will write the
            &lt;UWMatrix&gt; and &lt;/UWMatrix&gt; tags.
            
            http://stackoverflow.com/questions/279534/proper-way-to-implement-ixmlserializable
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:UW.MathFunctions.UWMatrixCore">
            <summary>
            A class modeling a 2D rectangular matrix.  
            
            This should provide a minimal amount of core functionality.  Derived classes will add additional functionality.
            </summary>
        </member>
        <member name="F:UW.MathFunctions.UWMatrixCore.matrix">
            <summary>
            The underlying values of the matrix.
            </summary>
        </member>
        <member name="M:UW.MathFunctions.UWMatrixCore.#ctor">
            <summary>
            Default constructor.  This creates an empty matrix.
            </summary>
        </member>
        <member name="M:UW.MathFunctions.UWMatrixCore.#ctor(System.Double[0:,0:])">
            <summary>
            Construct from a 2D array.
            </summary>
            <param name="A">2D array to construct matrix from</param>
        </member>
        <member name="P:UW.MathFunctions.UWMatrixCore.Item(System.Int32,System.Int32)">
            <summary>
            Indexer to return and set a value at a specified index.  
            
            Note that the returned object (double value) cannot be used to modify the original matrix.
            </summary>
            <param name="m">row index</param>
            <param name="n">col index</param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrixCore.Equals(System.Object)">
            <summary>
            Check if objects are equal by value.  In other words, this checks to make sure that the contents of the two matrices are the same, not that they refer to the same object.
            </summary>
            <param name="obj">other matrix to check against</param>
            <returns>true if equal by value, false otherwise</returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrixCore.GetHashCode">
            <summary>
            Just calls the base.GetHashCode().
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrixCore.ReturnNumRows">
            <summary>
            Return the number of rows in the matrix.
            </summary>
            <returns>Number of rows in matrix</returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrixCore.ReturnNumColumns">
            <summary>
            Return the number of columns in the matrix.
            </summary>
            <returns>Number of columns in matrix</returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrixCore.ReturnColAtSpecifiedIndex(System.Int32)">
            <summary>
            Returns the specified column.
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrixCore.ReturnRowAtSpecifiedIndex(System.Int32)">
            <summary>
            Returns the specified row.
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrixCore.ToString">
            <summary>
            Return a string representation of the matrix.
            </summary>
            <returns>string representation of the matrix.</returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrixCore.Transpose">
            <summary>
            Transpose the matrix.
            </summary>
        </member>
        <member name="M:UW.MathFunctions.UWMatrixCore.Vcat(UW.MathFunctions.UWMatrixCore)">
            <summary>
            Concatenate a matrix B onto the end of this matrix (using Matlab notation: A = [A;B]).
            </summary>
            <param name="B"></param>
        </member>
        <member name="M:UW.MathFunctions.UWMatrixCore.returnAs2DArray">
            <summary>
            Returns a 2D array representation of the matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrixCore.returnRowAtSpecifiedIndex(System.Int32)">
            <summary>
            Return a List object corresponding to the specified row.
            
            The returned list should be a unique copy and cannot be used to reference the original object.
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:UW.MathFunctions.UWMatrixCore.returnColAtSpecifiedIndex(System.Int32)">
            <summary>
            Return a List object corresponding to the specified column.
            
            The returned list should be a unique copy and cannot be used to reference the original object.
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="T:UWMath.Geometry.GeometryFunctions.RectangularCell">
            <summary>
            This defines the four corners of a rectangular cell.
            </summary>
        </member>
        <member name="F:UWMath.Geometry.GeometryFunctions.RectangularCell.bottomLeft">
            <summary>
            This is the bottom left corner of the rectangular cell
            </summary>
        </member>
        <member name="F:UWMath.Geometry.GeometryFunctions.RectangularCell.topRight">
            <summary>
            This is the top right corner of the rectangular cell
            </summary>
        </member>
        <member name="M:UWMath.Geometry.GeometryFunctions.RectangularCell.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:UWMath.Geometry.GeometryFunctions.RectangularCell.#ctor(System.Windows.Point,System.Windows.Point)">
            <summary>
            User defined constructor
            </summary>
            <param name="bottomLeft"></param>
            <param name="topRight"></param>
        </member>
        <member name="P:UWMath.Geometry.GeometryFunctions.RectangularCell.BottomLeft">
            <summary>
            This is the bottom left corner of the rectangular cell.
            </summary>
        </member>
        <member name="P:UWMath.Geometry.GeometryFunctions.RectangularCell.TopRight">
            <summary>
            This is the top right corner of the rectangular cell.
            </summary>
        </member>
        <member name="P:UWMath.Geometry.GeometryFunctions.RectangularCell.XLength">
            <summary>
            Gives the x length of the RectangularCell
            </summary>
        </member>
        <member name="P:UWMath.Geometry.GeometryFunctions.RectangularCell.YLength">
            <summary>
            Gives the y length of the RectangularCell
            </summary>
        </member>
        <member name="M:UWMath.Geometry.GeometryFunctions.RectangularCell.checkCornerConsistency">
            <summary>
            Checking internal fields are consistent
            </summary>
            <returns></returns>
        </member>
        <member name="M:UWMath.Geometry.GeometryFunctions.RectangularCell.DeepCopy">
            <summary>
            Returns a new RectangularCell object, which is unique from the calling object
            (changes to the original does not affect the copy, and vice versa)
            </summary>
            <returns></returns>
        </member>
        <member name="T:UWMath.Geometry.GeometryFunctions.UWGridPolygon">
            <summary>
            Pixelated representation of a polygon
            </summary>
        </member>
        <member name="M:UWMath.Geometry.GeometryFunctions.UWGridPolygon.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:UWMath.Geometry.GeometryFunctions.UWGridPolygon.#ctor(System.Collections.Generic.List{UWMath.Geometry.GeometryFunctions.RectangularCell})">
            <summary>
            Constructor based on user specified parameters.
            This stores a unique copy of the input arguments so changes to one do not affect the other.
            </summary>
            <param name="rectangularCellList"></param>
        </member>
        <member name="P:UWMath.Geometry.GeometryFunctions.UWGridPolygon.GridsContainingPolygon">
            <summary>
            This is a list of RectangularCells that contain the polygon of interest.
            </summary>
        </member>
        <member name="P:UWMath.Geometry.GeometryFunctions.UWGridPolygon.Count">
            <summary>
            Number of cells that make up this polygon.
            </summary>
        </member>
        <member name="M:UWMath.Geometry.GeometryFunctions.UWGridPolygon.AddRectangularCell(UWMath.Geometry.GeometryFunctions.RectangularCell)">
            <summary>
            Adds a RectangularCell to the object.
            </summary>
            <param name="rectangularCellToBeAdded"></param>
        </member>
        <member name="M:UWMath.Geometry.GeometryFunctions.UWGridPolygon.RemoveRectangularCell(System.Int32)">
            <summary>
            Removes a RectangularCell from the object at the user specified index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:UWMath.Geometry.GeometryFunctions.UWGridPolygon.RemoveRectangularCell(UWMath.Geometry.GeometryFunctions.RectangularCell)">
            <summary>
            Removes a user specified RectangularCell from the object.
            </summary>
            <param name="rectangularCellToBeRemoved"></param>
        </member>
        <member name="M:UWMath.Geometry.GeometryFunctions.UWGridPolygon.GetRectangularCell(System.Int32)">
            <summary>
            Get the RectangularCell at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:UWMath.Geometry.GeometryFunctions.UWGridPolygon.DeepCopy">
            <summary>
            Returns a new UWGridPolygon object, which is unique from the calling object
            (changes to the original does not affect the copy, and vice versa)
            </summary>
            <returns></returns>
        </member>
        <member name="T:UWMath.Probability.Gaussian2DProbabilityOverPolygon">
            <summary>
            This class returns a conservative over estimation of the probability of a 2D Gaussian over a polygon region in the xy plane
            </summary>
        </member>
        <member name="F:UWMath.Probability.Gaussian2DProbabilityOverPolygon.gaussianDistribution2D">
            <summary>
            This is the 2D Gaussian Distribution that will be integrated against the specific polygon domain
            </summary>
        </member>
        <member name="F:UWMath.Probability.Gaussian2DProbabilityOverPolygon.polygonDomain">
            <summary>
            This is the domain being integrated to
            </summary>
        </member>
        <member name="F:UWMath.Probability.Gaussian2DProbabilityOverPolygon.numBlocksX">
            <summary>
            Number of blocks in the x direction used to create the grid
            </summary>
        </member>
        <member name="F:UWMath.Probability.Gaussian2DProbabilityOverPolygon.numBlocksY">
            <summary>
            Number of blocks in the y direction used to create the grid
            </summary>
        </member>
        <member name="M:UWMath.Probability.Gaussian2DProbabilityOverPolygon.#ctor">
            <summary>
            This is the default constructor
            </summary>
        </member>
        <member name="M:UWMath.Probability.Gaussian2DProbabilityOverPolygon.#ctor(UW.MathFunctions.ProbabilityFunctions.GaussianDistribution2D,UW.MathFunctions.GeometryFunctions.UWPolygon,System.Int32,System.Int32)">
            <summary>
            This is a constructor with user specified fields.
            </summary>
            <param name="gaussianDistribution2D"></param>
            <param name="polygonDomain"></param>
            <param name="numBlocksX">Default is 10 blocks.  Refer to NumBlocksX property.</param>
            <param name="numBlocksY">Default is 10 blocks.  Refer to NumBlocksY property.</param>
        </member>
        <member name="P:UWMath.Probability.Gaussian2DProbabilityOverPolygon.GaussianDistribution2D">
            <summary>
            This is the 2D Gaussian distribution.  It contains the covariance matrix in the xy domain and the mean position in the xy domain.
            </summary>
        </member>
        <member name="P:UWMath.Probability.Gaussian2DProbabilityOverPolygon.PolygonDomain">
            <summary>
            This is the region which the distribution is integrated to.
            </summary>
        </member>
        <member name="P:UWMath.Probability.Gaussian2DProbabilityOverPolygon.NumBlocksX">
            <summary>
            This is the number of blocks in the x direction.
            These blocks are used to discretize the polygon region.
            The higher number of blocks yields a more accurate probability.
            But having a low number of blocks yields very conservative estimations.
            </summary>
        </member>
        <member name="P:UWMath.Probability.Gaussian2DProbabilityOverPolygon.NumBlocksY">
            <summary>
            This is the number of blocks in the y direction.
            These blocks are used to discretize the polygon region.
            The higher number of blocks yields a more accurate probability.
            But having a low number of blocks yields very conservative estimations.
            </summary>
        </member>
        <member name="M:UWMath.Probability.Gaussian2DProbabilityOverPolygon.ProbabilityOverPolygonDomain">
            <summary>
            This calculates the conservative estimation of the probability between a 2D Gaussian distribution and an arbitrary polygon.  The arbitrary polygon is the domain of the double integral.
            The integration is done using Reimann sums, where the domain in question is meshed to user specified number of blocks in both the x and y direction.
            </summary>
            <returns>This is the conservative estimation of the probability integrated over a polygon domain</returns>
        </member>
        <member name="M:UWMath.Probability.Gaussian2DProbabilityOverPolygon.calcRotationMatrix(UW.Utilities.Units.UWAngle)">
            <summary>
            Calculates the rotation matrix
            </summary>
            <param name="theta">Rotation Angle</param>
            <returns></returns>
        </member>
        <member name="M:UWMath.Probability.Gaussian2DProbabilityOverPolygon.calcRotPolygonCentAtOrigin(UW.MathFunctions.UWMatrix)">
            <summary>
            Rotates and translates the polygon where the distribution is aligned with the +x axis and has a mean at the origin
            </summary>
            <param name="rotationMatrix"></param>
            <returns></returns>
        </member>
        <member name="M:UWMath.Probability.Gaussian2DProbabilityOverPolygon.calcProbOfEachGrid(UW.MathFunctions.ProbabilityFunctions.GaussianDistribution2D,UWMath.Geometry.GeometryFunctions.UWGridPolygon)">
            <summary>
            Using the list of each individual grid's corner that contains the polygon the probability for that grid is calculated
            and placed in a list
            </summary>
            <param name="gaussianDistributionUnrotatedAtOrigin"></param>
            <param name="gridsContainingPolygon"></param>
            <returns></returns>
        </member>
    </members>
</doc>

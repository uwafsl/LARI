<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UWUtilities</name>
    </assembly>
    <members>
        <member name="T:UW.Utilities.Graphics.ColorUtilities">
            <summary>
            Utility methods for generating color maps and working with colors
            </summary>
        </member>
        <member name="F:UW.Utilities.Graphics.ColorUtilities.BluetoOrangeHex">
            <summary>
            Blue to white to orange color array
            </summary>
        </member>
        <member name="F:UW.Utilities.Graphics.ColorUtilities.Rainbow">
            <summary>
            Rainbow color array
            </summary>
        </member>
        <member name="F:UW.Utilities.Graphics.ColorUtilities.HSVRed">
            <summary>
            Red component of the HSV color map.
            </summary>
        </member>
        <member name="F:UW.Utilities.Graphics.ColorUtilities.HSVGreen">
            <summary>
            Green component of the HSV color map.
            </summary>
        </member>
        <member name="F:UW.Utilities.Graphics.ColorUtilities.HSVBlue">
            <summary>
            Blue component of the HSV color map.
            </summary>
        </member>
        <member name="F:UW.Utilities.Graphics.ColorUtilities.JetRed">
            <summary>
            Red component of the Jet color map.
            </summary>
        </member>
        <member name="F:UW.Utilities.Graphics.ColorUtilities.JetGreen">
            <summary>
            Green component of the Jet color map.
            </summary>
        </member>
        <member name="F:UW.Utilities.Graphics.ColorUtilities.JetBlue">
            <summary>
            Blue component of the Jet color map.
            </summary>
        </member>
        <member name="M:UW.Utilities.Graphics.ColorUtilities.GetColorBlueOrange(System.Int32,System.Double)">
            <summary>
            Gets a color corresponding to the percent value on the BluetoOrangeHex color ramp.
            The colors go from blue (0) to white-ish (0.5) to orange (1).
            </summary>
            <param name="alpha">The alpha value for the new System.Drawing.Color. Valid values are 0 through 255.</param>
            <param name="percent">The percent value from 0 to 1.</param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Graphics.ColorUtilities.GetColorRainbow(System.Int32,System.Double)">
            <summary>
            Gets a color corresponding to the percent value on a rainbow color ramp.
            The rainbow colors go from Red (0) to Blue(1).
            </summary>
            <param name="alpha">The alpha value for the new System.Drawing.Color. Valid values are 0 through 255.</param>
            <param name="percent">The percent value from 0 to 1.</param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Graphics.ColorUtilities.GetColorHSV(System.Int32,System.Double)">
            <summary>
            Gets a color corresponding to the percent value on a HSV color ramp.
            </summary>
            <param name="alpha">The alpha value for the new System.Drawing.Color. Valid values are 0 through 255.</param>
            <param name="percent">The percent value from 0 to 1.</param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Graphics.ColorUtilities.GetColorJet(System.Int32,System.Double)">
            <summary>
            Gets a color corresponding to the percent value on a Jet color ramp.
            </summary>
            <param name="alpha">The alpha value for the new System.Drawing.Color. Valid values are 0 through 255.</param>
            <param name="percent">The percent value from 0 to 1.</param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Graphics.ColorUtilities.GetSolidBrushBlueOrange(System.Int32,System.Double)">
            <summary>
            Gets a color corresponding to the percent value on the BluetoOrangeHex color ramp.
            The colors go from blue (0) to white-ish (0.5) to orange (1).
            </summary>
            <param name="alpha">The alpha value for the new System.Drawing.Color. Valid values are 0 through 255.</param>
            <param name="percent">The percent value from 0 to 1.</param>
            <returns>The corresponding SolidBrush.</returns>
        </member>
        <member name="M:UW.Utilities.Graphics.ColorUtilities.GetSolidBrushRainbow(System.Int32,System.Double)">
            <summary>
            Gets a color corresponding to the percent value on a rainbow color ramp.
            The rainbow colors go from Red (0) to Blue(1).
            </summary>
            <param name="alpha">The alpha value for the new System.Drawing.Color. Valid values are 0 through 255.</param>
            <param name="percent">The percent value from 0 to 1.</param>
            <returns>The corresponding SolidBrush.</returns>
        </member>
        <member name="M:UW.Utilities.Graphics.ColorUtilities.GetSolidBrushHSV(System.Int32,System.Double)">
            <summary>
            Gets a color corresponding to the percent value on a HSV color ramp.
            </summary>
            <param name="alpha">The alpha value for the new System.Drawing.Color. Valid values are 0 through 255.</param>
            <param name="percent">The percent value from 0 to 1.</param>
            <returns>The corresponding SolidBrush.</returns>
        </member>
        <member name="M:UW.Utilities.Graphics.ColorUtilities.GetSolidBrushJet(System.Int32,System.Double)">
            <summary>
            Gets a color corresponding to the percent value on a Jet color ramp.
            </summary>
            <param name="alpha">The alpha value for the new System.Drawing.Color. Valid values are 0 through 255.</param>
            <param name="percent">The percent value from 0 to 1.</param>
            <returns>The corresponding SolidBrush.</returns>
        </member>
        <member name="T:UW.Utilities.Graphics.FontUtilities">
            <summary>
            A class to handle drawing fonts and characters.
            </summary>
        </member>
        <member name="M:UW.Utilities.Graphics.FontUtilities.PencilLocations(System.Char)">
            <summary>
            Gives a list of point locations that if connected using a pencil (without lifting the tip) would connect draw the specified character.
            
            These points are in the range of x in [-1,1] and y in [-1,1] with the center of the charcater as the origin.
            
            Note that the x-axis is positive to the right and the y-axis is positive up (aka the origin in the bottom left corner).  This may be different from certain rendering engines where the origin is in the top left corner.
            
            This the specified char is not supported, this returns null.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Graphics.FontUtilities.PencilLocations(System.Char,System.Double)">
            <summary>
            Does the same as PencilLocations(char c) except that this can be scaled larger or small using the scale factor.
            For example, a scale factor of 2 implies that the coordinates should vary between [-2, 2].
            </summary>
            <param name="c"></param>
            <param name="scaleFactor"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Graphics.FontUtilities.pencilLocations0to1(System.Char)">
            <summary>
            Does the same as PencilLocations(char c) except these points are in the range of x in [0,1] and y in [0,1].
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Graphics.FontUtilities.translate(System.Collections.Generic.List{System.Windows.Point},System.Windows.Point)">
            <summary>
            This is a copy of ListPointExtensions.ReturnTranslatedPoints but we cannot include this assembly as it would create a circular reference
            </summary>
            <param name="points"></param>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Graphics.FontUtilities.scale(System.Collections.Generic.List{System.Windows.Point},System.Double)">
            <summary>
            This is a copy of ListPointExtensions.ReturnScaledPoints but we cannot include this assembly as it would create a circular reference
            </summary>
            <param name="points"></param>
            <param name="scaleFactor"></param>
            <returns></returns>
        </member>
        <member name="T:UW.Utilities.StringComparerConcrete">
            <summary>
            Provide a concrete implementation of the StringComparer class
            </summary>
        </member>
        <member name="M:UW.Utilities.StringComparerConcrete.Compare(System.String,System.String)">
            <summary>
            Returns the results of string.Compare(x, y)
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.StringComparerConcrete.Equals(System.String,System.String)">
            <summary>
            Returns true if strings are equal, false otherwise.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.StringComparerConcrete.GetHashCode(System.String)">
            <summary>
            Returns StringComparer.GetHashCode
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:UW.Utilities.DoubleApproximateComparer">
            <summary>
            A class which comparers doubles and considers them equal if they are within the specified distance of each other.
            </summary>
        </member>
        <member name="M:UW.Utilities.DoubleApproximateComparer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:UW.Utilities.DoubleApproximateComparer.#ctor(System.Double)">
            <summary>
            Construct from the specified input
            </summary>
            <param name="distance">if two values are within this distance consider them equal.</param>
        </member>
        <member name="P:UW.Utilities.DoubleApproximateComparer.Distance">
            <summary>
            If two double value are within this distance of each other, consider them equal
            </summary>
        </member>
        <member name="M:UW.Utilities.DoubleApproximateComparer.Equals(System.Double,System.Double)">
            <summary>
            Equals method
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.DoubleApproximateComparer.GetHashCode(System.Double)">
            <summary>
            Hash code method
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:UW.Utilities.IntApproximateComparer">
            <summary>
            A class which comparers ints and considers them equal if they are within the specified distance of each other.
            </summary>
        </member>
        <member name="M:UW.Utilities.IntApproximateComparer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:UW.Utilities.IntApproximateComparer.#ctor(System.Int32)">
            <summary>
            Construct from the specified input
            </summary>
            <param name="distance"></param>
        </member>
        <member name="P:UW.Utilities.IntApproximateComparer.Distance">
            <summary>
            If two int value are within this distance of each other, consider them equal
            </summary>
        </member>
        <member name="M:UW.Utilities.IntApproximateComparer.Equals(System.Int32,System.Int32)">
            <summary>
            Equals method
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.IntApproximateComparer.GetHashCode(System.Int32)">
            <summary>
            Hash code method
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:UW.Utilities.MatrixContainer`1">
            <summary>
            A 2D container of general objects.  This is similar to Matlab's cell arrays where you can contain objects in a 2D structure.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:UW.Utilities.MatrixContainer`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:UW.Utilities.MatrixContainer`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct with the specified number of rows and columns
            </summary>
            <param name="numRows"></param>
            <param name="numCols"></param>
        </member>
        <member name="M:UW.Utilities.MatrixContainer`1.#ctor(UW.Utilities.MatrixContainer{`0})">
            <summary>
            Construct a new, unique object from an existing MatrixContainer object
            </summary>
            <param name="A"></param>
        </member>
        <member name="M:UW.Utilities.MatrixContainer`1.Hcat(UW.Utilities.MatrixContainer{`0})">
            <summary>
            Concatenate the container B onto this object
            </summary>
            <param name="B"></param>
        </member>
        <member name="T:UW.Utilities.MatrixContainerCore`1">
            <summary>
            A class to hold 2D, generic data.  This is similar to Matlab's cell array.
            
            This class does not support traditional "math matrix operations", which is 
            why it is considered part of the UWUtilities assembly rather than a UWMath assembly.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:UW.Utilities.MatrixContainerCore`1.matrix">
            <summary>
            inner list is a row 
            
                rowk = [a b c d]
            
            out list is the list of rows (starting from first row and proceeding down)
            
                [row0]
                [row1]
                [ .  ]
                [ .  ]
                [ .  ]
                [rowM]
            
            </summary>
        </member>
        <member name="M:UW.Utilities.MatrixContainerCore`1.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:UW.Utilities.MatrixContainerCore`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct a container with numRows and numCols.  
            
            Each element should be filled with the object created by the default constructor for type T
            </summary>
            <param name="numRows"></param>
            <param name="numCols"></param>
        </member>
        <member name="P:UW.Utilities.MatrixContainerCore`1.Item(System.Int32,System.Int32)">
            <summary>
            Get/set matrix values using [] notation
            </summary>
            <param name="m"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.MatrixContainerCore`1.Equals(System.Object)">
            <summary>
            Check if objects are equal.  
            
            Note that this checks is each element in the container is equal to the other by calling the object type's Equals method.  
            Therefore, depending on how that type's Equals is implemented, this could either check equal by value or equal by reference.
            </summary>
            <param name="obj">other MatrixContainerCore to check against</param>
            <returns>true if equal by value/reference (depending on type's Equal), false otherwise</returns>
        </member>
        <member name="M:UW.Utilities.MatrixContainerCore`1.GetHashCode">
            <summary>
            Hash code for the object
            </summary>
            <returns></returns>
        </member>
        <member name="P:UW.Utilities.MatrixContainerCore`1.NumRows">
            <summary>
            The number of rows in the matrix
            </summary>
        </member>
        <member name="P:UW.Utilities.MatrixContainerCore`1.NumColumns">
            <summary>
            The number of columns in the matrix
            </summary>
        </member>
        <member name="M:UW.Utilities.MatrixContainerCore`1.returnColAtSpecifiedIndex(System.Int32)">
            <summary>
            Return a List object corresponding to the specified column.
            
            The returned list should be a unique copy and cannot be used to reference the original object.
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.MatrixContainerCore`1.returnRowAtSpecifiedIndex(System.Int32)">
            <summary>
            Return a List object corresponding to the specified row.
            
            The returned list should be a unique copy and cannot be used to reference the original object.
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.MatrixContainerCore`1.ReturnTranspose">
            <summary>
            Transpose the matrix.
            </summary>
        </member>
        <member name="M:UW.Utilities.MatrixContainerCore`1.Transpose">
            <summary>
            Transpose the matrix
            </summary>
        </member>
        <member name="M:UW.Utilities.MatrixContainerCore`1.Vcat(UW.Utilities.MatrixContainerCore{`0})">
            <summary>
            Concatenate the matrix B onto this object 
            </summary>
            <param name="B"></param>
        </member>
        <member name="T:UW.Utilities.MessageHandler">
            <summary>
            Designed to log messages to a file.  
            
            Before using this class, an object should be instantiated and used to set the static fields/properties such as the log file directory and name as well as create the log file.
            </summary>
        </member>
        <member name="M:UW.Utilities.MessageHandler.#cctor">
            <summary>
            Static constructor.  This is static so that it is called automatically before the first instance is created or any static members are referenced.
            </summary>
        </member>
        <member name="P:UW.Utilities.MessageHandler.LogFileDirectory">
            <summary>
            The directory of where the log file should be created.  This is the directory only, do not include the file name in this path.
            </summary>
        </member>
        <member name="P:UW.Utilities.MessageHandler.LogFileName">
            <summary>
            Read only property of the name of the log file.
            </summary>
        </member>
        <member name="P:UW.Utilities.MessageHandler.LogFileDirectoryFileName">
            <summary>
            Read only property of the full directory and file name of the log file.
            </summary>
        </member>
        <member name="M:UW.Utilities.MessageHandler.createLogFileDirectory">
            <summary>
            Create a log file directory in the location specified by logFileDirectory.  This creates a directory if it does not already exist.
            </summary>
        </member>
        <member name="M:UW.Utilities.MessageHandler.LogMessage(System.String)">
            <summary>
            Logs the message to the log file.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:UW.Utilities.Units.UWAngle">
            <summary>
            Captures an angle in a unit-agnostic fashion.
            </summary>
        </member>
        <member name="F:UW.Utilities.Units.UWAngle.InvalidValue">
            <summary>
            Value to represent an invalid angle.
            </summary>
        </member>
        <member name="M:UW.Utilities.Units.UWAngle.#ctor(System.Double)">
            <summary>
            Create a UWAngle object from the specified value in radians.
            
            Note that this SHOULD NOT minimize the angle to allow us to store/represent an invalid angle
            </summary>
            <param name="radians"></param>
        </member>
        <member name="P:UW.Utilities.Units.UWAngle.IsValid">
            <summary>
            Does this object represent a valid angle?
            </summary>
        </member>
        <member name="P:UW.Utilities.Units.UWAngle.InRadians">
            <summary>
            The value of the angle in radians.
            </summary>
        </member>
        <member name="P:UW.Utilities.Units.UWAngle.InDegrees">
            <summary>
            The value of the angle in degrees.
            </summary>
        </member>
        <member name="M:UW.Utilities.Units.UWAngle.op_Addition(UW.Utilities.Units.UWAngle,UW.Utilities.Units.UWAngle)">
            <summary>
            Adds two angles together (a + b)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWAngle.op_Subtraction(UW.Utilities.Units.UWAngle,UW.Utilities.Units.UWAngle)">
            <summary>
            Subtracts angle b from angle a (a - b)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWAngle.op_UnaryNegation(UW.Utilities.Units.UWAngle)">
            <summary>
            Negates the angle.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWAngle.IsPlusOrMinus180(UW.Utilities.Units.UWAngle,UW.Utilities.Units.UWAngle)">
            <summary>
            Checks if this angle if exactly plus or minus 180 degrees from the otherAngle (to within the specified tolerance).
            This returns false if the otherAngle is the same as this angle.  In other words, this method
            only checks if this angle is 180 degrees away from the otherAngle.
            </summary>
            <param name="otherAngle"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWAngle.IsApproximatelyEqual(UW.Utilities.Units.UWAngle,UW.Utilities.Units.UWAngle)">
            <summary>
            Checks if this angle is approximately equal to otherAngle (to within the specified tolerance).
            </summary>
            <param name="otherAngle"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWAngle.ToString">
            <summary>
            Return a string of the UWAngle which is suitable for display.  This displays the angle in degrees or the string "Invalid" if the angle is invalid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWAngle.Invalid">
            <summary>
            Returns an invalid UWAngle object (<see cref="P:UW.Utilities.Units.UWAngle.IsValid"/> will return false.)
            </summary>
            <returns>The resultant UWAngle object.</returns>
        </member>
        <member name="M:UW.Utilities.Units.UWAngle.FromRadians(System.Double)">
            <summary>
            Returns a UWAngle object initialized with the value given in radians.  
            Note that this stores the equivalent angle in the range of (-pi,pi].
            </summary>
            <param name="radians">The value to initialize the UWAngle object with.</param>
            <returns>The resultant UWAngle object.</returns>
        </member>
        <member name="M:UW.Utilities.Units.UWAngle.FromDegrees(System.Double)">
            <summary>
            Returns a UWAngle object initialized with the value given in degrees.
            Note that this stores the equivalent angle in the range of (-180, 180] deg.
            </summary>
            <param name="degrees">The value to initialize the UWAngle object with.</param>
            <returns>The resultant UWAngle object.</returns>
        </member>
        <member name="M:UW.Utilities.Units.UWAngle.MinimizeAngle(System.Double,System.Boolean)">
            <summary>
            Returns an equivalent angle in the range (-pi,pi] radians.
            </summary>
            <param name="thetaRadians">angle to be minimized (in radians)</param>
            <param name="alternateRange">set to true to denote that the output range should be in range [0,2*pi)</param>
            <returns>equivalent angle in the specified range (in radians)</returns>
        </member>
        <member name="M:UW.Utilities.Units.UWAngle.AreAnglesApproximatelyEqual(UW.Utilities.Units.UWAngle,UW.Utilities.Units.UWAngle,UW.Utilities.Units.UWAngle)">
            <summary>
            Determines if two angle are approximately equal to each other (within the specified tolerance)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="T:UW.Utilities.Units.UWArea">
            <summary>
            Captures an area in a unit-agnostic fashion.
            </summary>
        </member>
        <member name="F:UW.Utilities.Units.UWArea.InvalidValue">
            <summary>
            Value to represent an invalid area
            </summary>
        </member>
        <member name="P:UW.Utilities.Units.UWArea.IsValid">
            <summary>
            Does this object represent a valid area?
            </summary>
        </member>
        <member name="P:UW.Utilities.Units.UWArea.InSquareMeters">
            <summary>
            The value of the area in square meters.
            </summary>
        </member>
        <member name="P:UW.Utilities.Units.UWArea.InSquareFeet">
            <summary>
            The value of the area in square feet.
            </summary>
        </member>
        <member name="P:UW.Utilities.Units.UWArea.InSquareKilometers">
            <summary>
            The value of the area in square kilometers.
            </summary>
        </member>
        <member name="P:UW.Utilities.Units.UWArea.InSquareMiles">
            <summary>
            The value of the area in square miles.
            </summary>
        </member>
        <member name="P:UW.Utilities.Units.UWArea.InAcres">
            <summary>
            The value of the area in acres.
            </summary>
        </member>
        <member name="M:UW.Utilities.Units.UWArea.op_Addition(UW.Utilities.Units.UWArea,UW.Utilities.Units.UWArea)">
            <summary>
            Adds two areas together (a+b)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWArea.op_Subtraction(UW.Utilities.Units.UWArea,UW.Utilities.Units.UWArea)">
            <summary>
            Subtracts area b from area a (a - b)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWArea.op_Multiply(UW.Utilities.Units.UWArea,System.Double)">
            <summary>
            Multiplies the area by the scalar (a*scalar)
            </summary>
            <param name="a"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWArea.op_Multiply(System.Double,UW.Utilities.Units.UWArea)">
            <summary>
            Multiplies the area by the scalar (a*scalar)
            </summary>
            <param name="scalar"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWArea.op_Division(UW.Utilities.Units.UWArea,System.Double)">
            <summary>
            Divides a by the scalar (a/scalar)
            </summary>
            <param name="a"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWArea.op_Division(System.Double,UW.Utilities.Units.UWArea)">
            <summary>
            Divides a by the scalar (a/scalar)
            </summary>
            <param name="scalar"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWArea.op_LessThan(UW.Utilities.Units.UWArea,UW.Utilities.Units.UWArea)">
            <summary>
            Checks if a is less than b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWArea.op_LessThanOrEqual(UW.Utilities.Units.UWArea,UW.Utilities.Units.UWArea)">
            <summary>
            Checks if a is less than or equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWArea.op_GreaterThan(UW.Utilities.Units.UWArea,UW.Utilities.Units.UWArea)">
            <summary>
            Checks if a is greater than b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWArea.op_GreaterThanOrEqual(UW.Utilities.Units.UWArea,UW.Utilities.Units.UWArea)">
            <summary>
            Checks if a is greater than or equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWArea.ReturnNegativeArea">
            <summary>
            Returns the negative of this area
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWArea.EqualsApproximate(UW.Utilities.Units.UWArea,UW.Utilities.Units.UWArea)">
            <summary>
            Determines if this is approximately equal to another area to within the specified tolerance.
            </summary>
            <param name="other"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWArea.ToString">
            <summary>
            Return a string of the UWArea which is suitable for display.  This displays the area in square meters or the string "Invalid" if the area is invalid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWArea.Invalid">
            <summary>
            Returns an invalid UWArea object (<see cref="P:UW.Utilities.Units.UWArea.IsValid"/> will return false.)
            </summary>
            <returns>The resultant UWArea object.</returns>
        </member>
        <member name="M:UW.Utilities.Units.UWArea.FromSquareMeters(System.Double)">
            <summary>
            Returns a UWArea object initialized with the value given in square meters.
            </summary>
            <param name="squareMeters">area in square meters</param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWArea.FromSquareFeet(System.Double)">
            <summary>
            Returns a UWArea object initialized with the value given in square feet.
            </summary>
            <param name="squareFeet">area in square feet</param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWArea.FromSquareKilometers(System.Double)">
            <summary>
            Returns a UWArea object initialized with the value given in square kilometers.
            </summary>
            <param name="squareKilometers">area in square kilometers</param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWArea.FromSquareMiles(System.Double)">
            <summary>
            Returns a UWArea object initialized with the value given in square miles.
            </summary>
            <param name="squareMiles">area in square miles</param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWArea.FromAcres(System.Double)">
            <summary>
            Returns a UWArea object initialized with the value given in acres.
            </summary>
            <param name="acres">area in acres</param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWArea.EqualsApproximate(UW.Utilities.Units.UWArea,UW.Utilities.Units.UWArea,UW.Utilities.Units.UWArea)">
            <summary>
            Determines if this area is approximately equal to the other area to within the specified tolerance.
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="T:UW.Utilities.Units.UWDistance">
            <summary>
            Captures a distance/length in a unit-agnostic fashion.
            </summary>
        </member>
        <member name="F:UW.Utilities.Units.UWDistance.InvalidValue">
            <summary>
            Value to represent an invalid distance
            </summary>
        </member>
        <member name="P:UW.Utilities.Units.UWDistance.IsValid">
            <summary>
            Does this object represent a valid distance?
            </summary>
        </member>
        <member name="P:UW.Utilities.Units.UWDistance.InMeters">
            <summary>
            The value of the distance in meters.
            </summary>
        </member>
        <member name="P:UW.Utilities.Units.UWDistance.InFeet">
            <summary>
            The value of the distance in feet.
            </summary>
        </member>
        <member name="P:UW.Utilities.Units.UWDistance.InInches">
            <summary>
            The value of the distance in inches.
            </summary>
        </member>
        <member name="P:UW.Utilities.Units.UWDistance.InNauticalMiles">
            <summary>
            The value of the distance in nautical miles.
            </summary>
        </member>
        <member name="M:UW.Utilities.Units.UWDistance.op_Addition(UW.Utilities.Units.UWDistance,UW.Utilities.Units.UWDistance)">
            <summary>
            Adds two distances together (a+b)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWDistance.op_Subtraction(UW.Utilities.Units.UWDistance,UW.Utilities.Units.UWDistance)">
            <summary>
            Subtracts distance b from distance a (a - b)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWDistance.op_UnaryNegation(UW.Utilities.Units.UWDistance)">
            <summary>
            Negates the distance.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWDistance.op_Multiply(UW.Utilities.Units.UWDistance,System.Double)">
            <summary>
            Multiplies the distance by the scalar (a*scalar)
            </summary>
            <param name="a"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWDistance.op_Multiply(System.Double,UW.Utilities.Units.UWDistance)">
            <summary>
            Multiplies the distance by the scalar (a*scalar)
            </summary>
            <param name="scalar"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWDistance.op_Division(UW.Utilities.Units.UWDistance,System.Double)">
            <summary>
            Divides a by the scalar (a/scalar)
            </summary>
            <param name="a"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWDistance.op_Division(System.Double,UW.Utilities.Units.UWDistance)">
            <summary>
            Divides a by the scalar (a/scalar)
            </summary>
            <param name="scalar"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWDistance.op_LessThan(UW.Utilities.Units.UWDistance,UW.Utilities.Units.UWDistance)">
            <summary>
            Checks if a is less than b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWDistance.op_LessThanOrEqual(UW.Utilities.Units.UWDistance,UW.Utilities.Units.UWDistance)">
            <summary>
            Checks if a is less than or equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWDistance.op_GreaterThan(UW.Utilities.Units.UWDistance,UW.Utilities.Units.UWDistance)">
            <summary>
            Checks if a is greater than b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWDistance.op_GreaterThanOrEqual(UW.Utilities.Units.UWDistance,UW.Utilities.Units.UWDistance)">
            <summary>
            Checks if a is greater than or equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWDistance.ReturnNegativeDistance">
            <summary>
            Returns the negative of this distance
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWDistance.EqualsApproximate(UW.Utilities.Units.UWDistance,UW.Utilities.Units.UWDistance)">
            <summary>
            Determines if this is approximately equal to another distance to within the specified tolerance.
            </summary>
            <param name="other"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWDistance.ToString">
            <summary>
            Return a string of the UWDistance which is suitable for display.  This displays the distance in meters or the string "Invalid" if the distance is invalid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWDistance.Invalid">
            <summary>
            Returns an invalid UWDistance object (<see cref="P:UW.Utilities.Units.UWDistance.IsValid"/> will return false.)
            </summary>
            <returns>The resultant UWDistance object.</returns>
        </member>
        <member name="M:UW.Utilities.Units.UWDistance.FromMeters(System.Double)">
            <summary>
            Returns a UWDistance object initialized with the value given in meters.
            </summary>
            <param name="meters">distance in meters</param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWDistance.FromFeet(System.Double)">
            <summary>
            Returns a UWDistance object initialized with the value given in feet.
            </summary>
            <param name="feet">distance in feet</param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWDistance.FromNauticalMiles(System.Double)">
            <summary>
            Returns a UWDistance object initialized with the value given in nautical miles.
            </summary>
            <param name="nauticalMiles">distance in nautical miles</param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWDistance.EqualsApproximate(UW.Utilities.Units.UWDistance,UW.Utilities.Units.UWDistance,UW.Utilities.Units.UWDistance)">
            <summary>
            Determines if this distance is approximately equal to the other distance to within the specified tolerance.
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="T:UW.Utilities.Units.UWVelocity">
            <summary>
            Captures a velocity in unit-agnostic fashion.
            </summary>
        </member>
        <member name="F:UW.Utilities.Units.UWVelocity.InvalidValue">
            <summary>
            Value to represent an invalid velocity
            </summary>
        </member>
        <member name="M:UW.Utilities.Units.UWVelocity.#ctor(System.Double)">
            <summary>
            Creates a Velocity object that represents the magnitude of a given
            velocity in m/s
            </summary>
            <param name="metersPerSecond"></param>
        </member>
        <member name="P:UW.Utilities.Units.UWVelocity.IsValid">
            <summary>
            Does this object represent a valid velocity?
            </summary>
        </member>
        <member name="P:UW.Utilities.Units.UWVelocity.InMetersPerSecond">
            <summary>
            The value of the velocity in meters/second.
            </summary>
        </member>
        <member name="P:UW.Utilities.Units.UWVelocity.InFeetPerSecond">
            <summary>
            The value of the velocity in feet/second.
            </summary>
        </member>
        <member name="P:UW.Utilities.Units.UWVelocity.InMilesPerHour">
            <summary>
            The value of the velocity in miles/hour.
            </summary>
        </member>
        <member name="P:UW.Utilities.Units.UWVelocity.InKnots">
            <summary>
            The value of the velocity in knots.
            </summary>
        </member>
        <member name="M:UW.Utilities.Units.UWVelocity.op_Addition(UW.Utilities.Units.UWVelocity,UW.Utilities.Units.UWVelocity)">
            <summary>
            Adds two velocities together (a+b)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWVelocity.op_Subtraction(UW.Utilities.Units.UWVelocity,UW.Utilities.Units.UWVelocity)">
            <summary>
            Subtracts velocities b from distance a (a - b)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWVelocity.op_Multiply(UW.Utilities.Units.UWVelocity,System.Double)">
            <summary>
            Multiplies the velocity by the scalar (a*scalar)
            </summary>
            <param name="a"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWVelocity.op_Multiply(System.Double,UW.Utilities.Units.UWVelocity)">
            <summary>
            Multiplies the velocity by the scalar (a*scalar)
            </summary>
            <param name="scalar"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWVelocity.op_Division(UW.Utilities.Units.UWVelocity,System.Double)">
            <summary>
            Divides a by the scalar (a/scalar)
            </summary>
            <param name="a"></param>
            <param name="scalar"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWVelocity.op_Division(System.Double,UW.Utilities.Units.UWVelocity)">
            <summary>
            Divides a by the scalar (a/scalar)
            </summary>
            <param name="scalar"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWVelocity.op_LessThan(UW.Utilities.Units.UWVelocity,UW.Utilities.Units.UWVelocity)">
            <summary>
            Checks if a is less than b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWVelocity.op_LessThanOrEqual(UW.Utilities.Units.UWVelocity,UW.Utilities.Units.UWVelocity)">
            <summary>
            Checks if a is less than or equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWVelocity.op_GreaterThan(UW.Utilities.Units.UWVelocity,UW.Utilities.Units.UWVelocity)">
            <summary>
            Checks if a is greater than b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWVelocity.op_GreaterThanOrEqual(UW.Utilities.Units.UWVelocity,UW.Utilities.Units.UWVelocity)">
            <summary>
            Checks if a is greater than or equal to b
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWVelocity.ReturnNegativeVelocity">
            <summary>
            Returns the negative of this velocity
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWVelocity.EqualsApproximate(UW.Utilities.Units.UWVelocity,UW.Utilities.Units.UWVelocity)">
            <summary>
            Determines if this is approximately equal to another velocity to within the specified tolerance.
            </summary>
            <param name="other"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWVelocity.ToString">
            <summary>
            Return a string of the UWVelocity which is suitable for display.  This displays the velocity in meters/sec or the string "Invalid" if the velocity is invalid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.Units.UWVelocity.Invalid">
            <summary>
            Returns an invalid UWVelocity object (<see cref="P:UW.Utilities.Units.UWVelocity.IsValid"/> will return false.)
            </summary>
            <returns>The resultant UWVelocity object.</returns>
        </member>
        <member name="M:UW.Utilities.Units.UWVelocity.FromMetersPerSecond(System.Double)">
            <summary>
            Returns a UWVelocity object initialized with the value given in meters per sec.
            </summary>
            <param name="metersPerSecond">velocity in meters per second</param>
            <returns>The resultant UWVelocity object</returns>
        </member>
        <member name="M:UW.Utilities.Units.UWVelocity.FromFeetPerSecond(System.Double)">
            <summary>
            Returns a UWVelocity object initialized with the value given in feet per sec.
            </summary>
            <param name="feetPerSecond">velocity in feet per second</param>
            <returns>The resultant UWVelocity object</returns>
        </member>
        <member name="M:UW.Utilities.Units.UWVelocity.FromKnots(System.Double)">
            <summary>
            Returns a UWVelocity object initialized with the value given in knots.
            </summary>
            <param name="knots">velocity in knots</param>
            <returns>The resultant UWVelocity object</returns>
        </member>
        <member name="M:UW.Utilities.Units.UWVelocity.FromMilesPerHour(System.Double)">
            <summary>
            Returns a UWVelocity object initialized with the value given in miles per hour.
            </summary>
            <param name="milesPerHour">velocity in miles per hour</param>
            <returns>The resultant UWVelocity object</returns>
        </member>
        <member name="M:UW.Utilities.Units.UWVelocity.EqualsApproximate(UW.Utilities.Units.UWVelocity,UW.Utilities.Units.UWVelocity,UW.Utilities.Units.UWVelocity)">
            <summary>
            Determines if this velocity is approximately equal to the other velocity to within the specified tolerance.
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="T:UW.Utilities.UWConversionFactorsLength">
            <summary>
            Conversion factors of lengths
            </summary>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsLength.FtToM(System.Double)">
            <summary>
            Convert feet to meters
            </summary>
            <param name="Ft">length in feet</param>
            <returns>length in meters</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsLength.FtToM(System.Single)">
            <summary>
            Convert feet to meters
            </summary>
            <param name="Ft">length in feet</param>
            <returns>length in meters</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsLength.MToFt(System.Double)">
            <summary>
            Convert meters to feet
            </summary>
            <param name="M">length in meters</param>
            <returns>length in feet</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsLength.MToFt(System.Single)">
            <summary>
            Convert meters to feet
            </summary>
            <param name="M">length in meters</param>
            <returns>length in feet</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsLength.NauticalMilesToMeters(System.Double)">
            <summary>
            Convert nautical miles to meters
            </summary>
            <param name="NauticalMiles">length in nautical miles</param>
            <returns>length in meters</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsLength.NauticalMilesToMeters(System.Single)">
            <summary>
            Convert nautical miles to meters
            </summary>
            <param name="NauticalMiles">length in nautical miles</param>
            <returns>length in meters</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsLength.MetersToNauticalMiles(System.Double)">
            <summary>
            Convert meters to nautical miles
            </summary>
            <param name="M">length in meters</param>
            <returns>length in nautical miles</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsLength.MetersToNauticalMiles(System.Single)">
            <summary>
            Convert meters to nautical miles
            </summary>
            <param name="M">length in meters</param>
            <returns>length in nautical miles</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsLength.MilesToFt(System.Double)">
            <summary>
            Convert from miles to feet.
            </summary>
            <param name="Miles">length in miles</param>
            <returns>length in feet</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsLength.MilesToFt(System.Single)">
            <summary>
            Convert from miles to feet.
            </summary>
            <param name="Miles">length in miles</param>
            <returns>length in feet</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsLength.FtToMiles(System.Double)">
            <summary>
            Convert from feet to miles
            </summary>
            <param name="Miles">length in feet</param>
            <returns>length in miles</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsLength.FtToMiles(System.Single)">
            <summary>
            Convert from feet to miles
            </summary>
            <param name="Miles">length in feet</param>
            <returns>length in miles</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsLength.MilesToMeters(System.Double)">
            <summary>
            Convert from miles to meters
            </summary>
            <param name="Miles">length in miles</param>
            <returns>length in meters</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsLength.MilesToMeters(System.Single)">
            <summary>
            Convert from miles to meters
            </summary>
            <param name="Miles">length in miles</param>
            <returns>length in meters</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsLength.MetersToMiles(System.Double)">
            <summary>
            Convert from meters to miles
            </summary>
            <param name="Meters">length in meters</param>
            <returns>length in miles</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsLength.MetersToMiles(System.Single)">
            <summary>
            Convert from meters to miles
            </summary>
            <param name="Meters">length in meters</param>
            <returns>length in miles</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsLength.MilesToKilometers(System.Double)">
            <summary>
            Convert from miles to kilometers
            </summary>
            <param name="Miles">length in miles</param>
            <returns>length in kilometers</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsLength.MilesToKilometers(System.Single)">
            <summary>
            Convert from miles to kilometers
            </summary>
            <param name="Miles">length in miles</param>
            <returns>length in kilometers</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsLength.KilometersToMiles(System.Double)">
            <summary>
            Convert from kilometers to miles
            </summary>
            <param name="Miles">length in kilometers</param>
            <returns>length in miles</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsLength.KilometersToMiles(System.Single)">
            <summary>
            Convert from kilometers to miles
            </summary>
            <param name="Miles">length in kilometers</param>
            <returns>length in miles</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsLength.MetersToInches(System.Double)">
            <summary>
            Convert from meters to inches
            </summary>
            <param name="Meters">length in meters</param>
            <returns>length in inches</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsLength.MetersToInches(System.Single)">
            <summary>
            Convert from meters to inches
            </summary>
            <param name="Meters">length in meters</param>
            <returns>length in inches</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsLength.InchesToMeters(System.Double)">
            <summary>
            Convert from inches to meters
            </summary>
            <param name="Inches">length in inches</param>
            <returns>length in meters</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsLength.InchesToMeters(System.Single)">
            <summary>
            Convert from inches to meters
            </summary>
            <param name="Inches">length in inches</param>
            <returns>length in meters</returns>
        </member>
        <member name="T:UW.Utilities.UWConversionFactorsVelocity">
            <summary>
            Conversion factors for velocity
            </summary>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsVelocity.KnotstoMetersPerSec(System.Double)">
            <summary>
            Convert from knots to meters/sec.
            </summary>
            <param name="Knots">velocity in knots</param>
            <returns>velocity in meters per sec</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsVelocity.MetersPerSecToKnots(System.Double)">
            <summary>
            Convert from meters/sec to knots.
            </summary>
            <param name="MetersPerSec">velocity in meters per sec</param>
            <returns>velocity in knots</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsVelocity.MilesPerHourToMetersPerSec(System.Double)">
            <summary>
            Convert from miles/hour to meters/sec
            </summary>
            <param name="MilesPerHour">velocity in miles per hour</param>
            <returns>velocity in meters per sec</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsVelocity.MetersPerSecToMilesPerHour(System.Double)">
            <summary>
            Convert from meters/sec to miles/hour 
            </summary>
            <param name="MetersPerSec">velocity in meters per sec</param>
            <returns>velocity in miles per hour</returns>
        </member>
        <member name="T:UW.Utilities.UWConversionFactorsMisc">
            <summary>
            Conversion factors for miscellaneous units
            </summary>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsMisc.DegreeToRadian(System.Double)">
            <summary>
            Convert from degrees to radians
            </summary>
            <param name="Degree">angle in degrees</param>
            <returns>angle in radians</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsMisc.RadianToDegree(System.Double)">
            <summary>
            Convert from radians to degrees.
            </summary>
            <param name="Radian">angle in radians</param>
            <returns>angle in degrees</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsMisc.HoursToMinutes(System.Double)">
            <summary>
            Convert from hours to minutes.
            </summary>
            <param name="Hours">time in hours</param>
            <returns>time in minutes</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsMisc.HoursToSeconds(System.Double)">
            <summary>
            Convert from hours to seconds
            </summary>
            <param name="Hours">time in hours</param>
            <returns>time in seconds</returns>
        </member>
        <member name="T:UW.Utilities.UWConversionFactorsArea">
            <summary>
            Conversion factors between various units of area
            </summary>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqMToSqFt(System.Double)">
            <summary>
            Convert square meters to square feet
            </summary>
            <param name="sqM">area in square meters</param>
            <returns>area in square feet</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqMToSqFt(System.Single)">
            <summary>
            Convert square meters to square feet
            </summary>
            <param name="sqM">area in square meters</param>
            <returns>area in square feet</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqMToSqMiles(System.Double)">
            <summary>
            Convert square meters to square miles
            </summary>
            <param name="sqM">area in square meters</param>
            <returns>area in square miles</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqMToSqMiles(System.Single)">
            <summary>
            Convert square meters to square miles
            </summary>
            <param name="sqM">area in square meters</param>
            <returns>area in square miles</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqMToSqKM(System.Double)">
            <summary>
            Convert square meters to square kilometers
            </summary>
            <param name="sqM">area in square meters</param>
            <returns>area in square kilometers</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqMToSqKM(System.Single)">
            <summary>
            Convert square meters to square kilometers
            </summary>
            <param name="sqM">area in square meters</param>
            <returns>area in square kilometers</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqMToAcres(System.Double)">
            <summary>
            Convert square meters to acres
            </summary>
            <param name="sqM">area in square meters</param>
            <returns>area in acres</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqMToAcres(System.Single)">
            <summary>
            Convert square meters to acres
            </summary>
            <param name="sqM">area in square meters</param>
            <returns>area in acres</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqMilesToSqM(System.Double)">
            <summary>
            Convert square miles to square meters
            </summary>
            <param name="sqMiles">area in square miles</param>
            <returns>area in square meters</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqMilesToSqM(System.Single)">
            <summary>
            Convert square miles to square meters
            </summary>
            <param name="sqMiles">area in square miles</param>
            <returns>area in square meters</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqMilesToSqFt(System.Double)">
            <summary>
            Convert square miles to square feet
            </summary>
            <param name="sqMiles">area in square miles</param>
            <returns>area in square feet</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqMilesToSqFt(System.Single)">
            <summary>
            Convert square miles to square feet
            </summary>
            <param name="sqMiles">area in square miles</param>
            <returns>area in square feet</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqMilesToSqKM(System.Double)">
            <summary>
            Convert square miles to square kilometers
            </summary>
            <param name="sqMiles">area in square miles</param>
            <returns>area in square kilometers</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqMilesToSqKM(System.Single)">
            <summary>
            Convert square miles to square kilometers
            </summary>
            <param name="sqMiles">area in square miles</param>
            <returns>area in square kilometers</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqMilesToAcres(System.Double)">
            <summary>
            Convert square miles to acres
            </summary>
            <param name="sqMiles">area in square miles</param>
            <returns>area in acres</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqMilesToAcres(System.Single)">
            <summary>
            Convert square miles to acres
            </summary>
            <param name="sqMiles">area in square miles</param>
            <returns>area in acres</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqFtToSqM(System.Double)">
            <summary>
            Convert square feet to square meters
            </summary>
            <param name="sqFt">area in square feet</param>
            <returns>area in square meters</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqFtToSqM(System.Single)">
            <summary>
            Convert square feet to square meters
            </summary>
            <param name="sqFt">area in square feet</param>
            <returns>area in square meters</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqFtToSqMiles(System.Double)">
            <summary>
            Convert square feet to square miles
            </summary>
            <param name="sqFt">area in square feet</param>
            <returns>area in square miles</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqFtToSqMiles(System.Single)">
            <summary>
            Convert square feet to square miles
            </summary>
            <param name="sqFt">area in square feet</param>
            <returns>area in square miles</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqFtToSqKM(System.Double)">
            <summary>
            Convert square feet to square kilometers
            </summary>
            <param name="sqFt">area in square feet</param>
            <returns>area in square kilometers</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqFtToSqKM(System.Single)">
            <summary>
            Convert square feet to square kilometers
            </summary>
            <param name="sqFt">area in square feet</param>
            <returns>area in square kilometers</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqFtToAcres(System.Double)">
            <summary>
            Convert square feet to acres
            </summary>
            <param name="sqFt">area in square feet</param>
            <returns>area in acres</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqFtToAcres(System.Single)">
            <summary>
            Convert square feet to acres
            </summary>
            <param name="sqFt">area in square feet</param>
            <returns>area in acres</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqKMToSqM(System.Double)">
            <summary>
            Convert square kilometers to square meters
            </summary>
            <param name="sqKM">area in square kilometers</param>
            <returns>area in meters</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqKMToSqM(System.Single)">
            <summary>
            Convert square kilometers to square meters
            </summary>
            <param name="sqKM">area in square kilometers</param>
            <returns>area in meters</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqKMToSqFt(System.Double)">
            <summary>
            Convert square kilometers to square feet
            </summary>
            <param name="sqKM">area in square kilometers</param>
            <returns>area in square feet</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqKMToSqFt(System.Single)">
            <summary>
            Convert square kilometers to square feet
            </summary>
            <param name="sqKM">area in square kilometers</param>
            <returns>area in square feet</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqKMToSqMiles(System.Double)">
            <summary>
            Convert square kilometers to square miles
            </summary>
            <param name="sqKM">area in square kilometers</param>
            <returns>area in square miles</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqKMToSqMiles(System.Single)">
            <summary>
            Convert square kilometers to square miles
            </summary>
            <param name="sqKM">area in square kilometers</param>
            <returns>area in square miles</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqKMToAcres(System.Double)">
            <summary>
            Convert square kilometers to acres
            </summary>
            <param name="sqKM">area in square kilometers</param>
            <returns>area in acres</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.SqKMToAcres(System.Single)">
            <summary>
            Convert square kilometers to acres
            </summary>
            <param name="sqKM">area in square kilometers</param>
            <returns>area in acres</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.AcresToSqM(System.Double)">
            <summary>
            Convert acres to square meters
            </summary>
            <param name="acres">area in acres</param>
            <returns>area in square meters</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.AcresToSqM(System.Single)">
            <summary>
            Convert acres to square meters
            </summary>
            <param name="acres">area in acres</param>
            <returns>area in square meters</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.AcresToSqFt(System.Double)">
            <summary>
            Convert acres to square feet
            </summary>
            <param name="acres">area in acres</param>
            <returns>area in square feet</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.AcresToSqFt(System.Single)">
            <summary>
            Convert acres to square feet
            </summary>
            <param name="acres">area in acres</param>
            <returns>area in square feet</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.AcresToSqMiles(System.Double)">
            <summary>
            Convert acres to square miles
            </summary>
            <param name="acres">area in acres</param>
            <returns>area in square miles</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.AcresToSqMiles(System.Single)">
            <summary>
            Convert acres to square miles
            </summary>
            <param name="acres">area in acres</param>
            <returns>area in square miles</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.AcresToSqKM(System.Double)">
            <summary>
            Convert acres to square kilometers
            </summary>
            <param name="acres">area in acres</param>
            <returns>area in square kilometers</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsArea.AcresToSqKM(System.Single)">
            <summary>
            Convert acres to square kilometers
            </summary>
            <param name="acres">area in acres</param>
            <returns>area in square kilometers</returns>
        </member>
        <member name="T:UW.Utilities.UWConversionFactorsForce">
            <summary>
            Conversion factors for force
            </summary>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsForce.NewtonsToPoundForce(System.Double)">
            <summary>
            Convert from newtons to lbf
            </summary>
            <param name="Newtons">force in newtons</param>
            <returns>force in lbf</returns>
        </member>
        <member name="M:UW.Utilities.UWConversionFactorsForce.PoundForceToNewtons(System.Double)">
            <summary>
            Convert from lbf to newtons
            </summary>
            <param name="lbf">force in pounds force</param>
            <returns>force in N</returns>
        </member>
        <member name="T:UW.Utilities.UWExtensionsBool">
            <summary>
            Extension methods for the bool class
            </summary>
        </member>
        <member name="M:UW.Utilities.UWExtensionsBool.ToString0or1(System.Boolean)">
            <summary>
            Returns a string of "1" or "0" depending on the value of the bool.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:UW.Utilities.UWExtensionsDictionary">
            <summary>
            Extension methods for the Dictionary class
            </summary>
        </member>
        <member name="M:UW.Utilities.UWExtensionsDictionary.OtherKeys``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns a list of all the keys in the dictionary that are different from the specifiedKey.  
            Note that specifiedKey does not need to be in the dictionary keys.
            This uses the specified comparer to determine if a key is equal to the specifiedKey.
            Order of the returned list is not specified.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="specifiedKey"></param>
            <param name="comparer">comparer to use to determine if two keys are equal</param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWExtensionsDictionary.ReverseLookup``2(System.Collections.Generic.Dictionary{``0,``1},``1)">
            <summary>
            Returns a list of all the keys that correspond to the specified value.  
            Whereas most Dictionary objects are used to lookup a value based on a unique key, this is essentially a reverse lookup to find keys based on values.
            The return type is a list of TKey objects to reflect the fact that several keys may correspond to the same value.
            A check to see if the dictionary's value equals the specifiedValue is done using the Equals method.  If a different equality comparison is required, see the version of this function that uses a IEqualityComparer&lt;TKey&gt; object as a second argument.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="specifiedValue"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWExtensionsDictionary.ReverseLookup``2(System.Collections.Generic.Dictionary{``0,``1},``1,System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Does the same as the ReverseLookup method but uses the specified comparer to determine if a value is equal to the specified value.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="specifiedValue"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="T:UW.Utilities.UWFunctionsDirectory">
            <summary>
            Functions related to directory operations.  Note that because the System.IO.Directory class is static, we cannot add extension methods, thereby necessitating the creation of a new static class.
            </summary>
        </member>
        <member name="M:UW.Utilities.UWFunctionsDirectory.IsDirectoryEmpty(System.String)">
            <summary>
            Determines if the specified directory is empty or not.  In order for it to be empty, there must be no files and no folders in the path.
            </summary>
            <param name="path">path to the directory in question</param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsDirectory.DeleteIfEmpty(System.String)">
            <summary>
            Deletes the specifed directory only if it is empty.  If it is not empty, this throws an exception.
            </summary>
            <param name="path">path to the directory to be deleted</param>
        </member>
        <member name="T:UW.Utilities.UWExtensionsDouble">
            <summary>
            Extension methods for the double class
            </summary>
        </member>
        <member name="M:UW.Utilities.UWExtensionsDouble.Square(System.Double)">
            <summary>
            Returns the square of this value.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWExtensionsDouble.Pow(System.Double,System.Double)">
            <summary>
            Returns this value raised to the yth power.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:UW.Utilities.UWFunctionsArrays">
            <summary>
            A class to provide functions to work with arrays
            </summary>
        </member>
        <member name="M:UW.Utilities.UWFunctionsArrays.Are2DArraysEqualByValue``1(``0[0:,0:],``0[0:,0:])">
            <summary>
            Checks if each element in the 2D array have the same values.  
            
            This assumes that the array contains value type objects or objects where the Equals method compares equality by value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsArrays.Are2DArraysApproximatelyEqualByValue(System.Double[0:,0:],System.Double[0:,0:],System.Double)">
            <summary>
            Checks if each element in the arrays have approximately the same values (within tolerance)
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsArrays.AreArraysEqualByValue``2(``0[],``1[])">
            <summary>
            Checks if each element in the arrays have the same values.  
            
            This requires that the array contains value type objects or objects where the Equals method compares equality by value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsArrays.AreArraysApproximatelyEqualByValue(System.Double[],System.Double[],System.Double)">
            <summary>
            Checks if each element in the arrays have approximately the same values (within tolerance)
            </summary>
            <param name="A"></param>
            <param name="B"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsArrays.Are2DArraysSameSize``2(``0[0:,0:],``1[0:,0:])">
            <summary>
            Check if two 2D arrays have the same number of rows and cols.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsArrays.ConcatenateArrays``1(``0[],``0[])">
            <summary>
            Create a array which is the array x followed by the array y.
            
            Note that this uses the Array.CopyTo method, so it creates only shallow copies.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsArrays.Convert2DArrayToString``1(``0[0:,0:],System.String,System.String)">
            <summary>
            Convert a 2D array to a string representation.  The rows and columns can be deliniated by the specified deliniators.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="w"></param>
            <param name="rowDeliniator">row deliniator (default is "\r\n")</param>
            <param name="colDeliniator">col deliniator (default is " ")</param>
            <returns>string representatino of the 2D array</returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsArrays.ConvertArrayToString``1(``0[],System.String)">
            <summary>
            Convert an array to a string representation.  The entries in the array are deliniated by the specified deliniator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="w"></param>
            <param name="deliniator"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsArrays.ConvertCharToByteArrayLengthOne(System.Char)">
            <summary>
            Returns the 1 byte array version of the character.  
            
            See also BitConverter.GetBytes(char)
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsArrays.ConvertStringTo2DArray``1(System.String,System.String,System.String)">
            <summary>
            Convert a string to a 2D array representation.
            
            The rows should be deliniated by a CRLF char sequence '\r\n' and the columns are deliniated by the specified colDeliniator.
            
            If the string does not represent a rectangular matrix, the empty values will remain initialized to the default value 
            that T[,] assigns to them for that type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="s"></param>
            <param name="rowDeliniator"></param>
            <param name="colDeliniator"></param>
            <returns>2D array representation of the string</returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsArrays.DisplayArray``1(``0[],System.Boolean)">
            <summary>
            Display the array with each element of the array on a different line.  If horizontal is true, the display the array on the same line, elements are deliniated by a ', ' sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="w"></param>
            <param name="horizontal">set to true if you would rather have the array displayed horizontally with each element seperated by a ", " string</param>
        </member>
        <member name="M:UW.Utilities.UWFunctionsArrays.GetNumberColsIn2DArray``1(``0[0:,0:])">
            <summary>
            Get the number of columns in the 2D array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsArrays.GetNumberRowsIn2DArray``1(``0[0:,0:])">
            <summary>
            Get the number of rows in the 2D array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="w"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsArrays.Print2DArray``1(``0[0:,0:])">
            <summary>
            Display the 2D array.
            </summary>
            <param name="w"></param>
        </member>
        <member name="M:UW.Utilities.UWFunctionsArrays.Print2DArrayToFile``1(``0[0:,0:],System.String,System.String,System.String)">
            <summary>
            Print a 2D array to a file
            </summary>
            <typeparam name="T"></typeparam>
            <param name="w"></param>
            <param name="directoryFileString"></param>
            <param name="rowDeliniator"></param>
            <param name="colDeliniator"></param>
        </member>
        <member name="M:UW.Utilities.UWFunctionsArrays.ReturnTranspose``1(``0[0:,0:])">
            <summary>
            Returns the transposed array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsArrays.ReturnUniqueCopyOfArray``1(``0[0:,0:])">
            <summary>
            Return a unique copy of the input array.
            </summary>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsArrays.SplitArrayIntoListOfArrays``1(``0[],System.Int32)">
            <summary>
            Note that the original array (T[] data) should support the .clone method in the sense that when it is called, 
            it creates a unique copy of the array (otherwise this may produce unexpected results).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="subArraySize"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsArrays.Convert2DArrayTo1DArray``1(``0[0:,0:])">
            <summary>
            If the 2D array only has 1 row or 1 column, this removes the extraneous dimension and returns the equivalent 1D array.
            
            If the input array is actually multidimensional, this throws an exception.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Array2D"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsArrays.Read2DArrayFromFile``1(System.String,System.String,System.String)">
            <summary>
            Read in the file contents at directoryFileString into a 2D array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="directoryFileString"></param>
            <param name="rowDeliniator"></param>
            <param name="colDeliniator"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsArrays.ReturnArrayMultipliedByScalar(System.Double[0:,0:],System.Double)">
            <summary>
            Return an array which is the input array, A, with every element multiplied by the scalar alpha.
            
            This does not affect the input array A.
            </summary>
            <param name="A"></param>
            <param name="alpha"></param>
            <returns></returns>
        </member>
        <member name="T:UW.Utilities.UWFunctionsEnums">
            <summary>
            Utility functions for working with Enums
            </summary>
        </member>
        <member name="M:UW.Utilities.UWFunctionsEnums.GetValues``1">
            <summary>
            Get all values of an enum.
            
            For more information, see stackoverflow thread "Can You Loop Through All Enum Values?"
            http://stackoverflow.com/questions/972307/can-you-loop-through-all-enum-values
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:UW.Utilities.UWFunctionsFileIO">
            <summary>
            A class to provide functionality to read/write files.
            </summary>
        </member>
        <member name="M:UW.Utilities.UWFunctionsFileIO.ReadStringFromFile(System.String)">
            <summary>
            Read the contents of a file into a string.
            </summary>
            <param name="directoryFileString">directory and file name of file to read from</param>
            <returns>contents of file as a string</returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsFileIO.ReturnFilesNamesInDirectory(System.String,System.String)">
            <summary>
            Returns all the file names in the specified directory.  This does not return the names of folders (subdirectories) within the specified directory.
            The searchPattern can be used to specify specific types of file names to return.  For example, to obtain a list of all the .txt files in the
            directory "C:\users\joe", use
            
            ReturnFilesNamesInDirectory("C:\users\joe", "*.txt");
            </summary>
            <param name="directoryString">directory to find files</param>
            <param name="searchPattern">search pattern</param>
            <returns>List<string> of file names</string></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsFileIO.SplitFilenameAndExtension(System.String)">
            <summary>
            Split a string to the filename and extension.
            </summary>
            <param name="nameAndExtensionString">directory to find files</param>
            <returns>string[] of file names (first element) and extension (second element)</returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsFileIO.WriteStringToFile(System.String,System.String,System.String)">
            <summary>
            Write the specified string to the specified file.
            Note that this writes the dataString as specified, it does not add carriage returns or newlines to the end of the string.
            In this sense, it acts more like Console.Write as opposed to Console.WriteLine.
            </summary>
            <param name="dataString"></param>
            <param name="directoryFileString"></param>
            <param name="fileWriteFlag"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsFileIO.SerializeToXMLFile``1(``0,System.String)">
            <summary>
            Serialize an object to a file.
            
            Note:  This may throw exceptions in the event that it cannot serialize successfully.
            Client should therefore use appropriate exception handling/catching with this method.
            Example usage:
            
                int myInt = 2;
                UWFunctionsFileIO.SerializeToXMLFile(myInt, "myFile.xml");
                
                StaticSearchPattern pattern1 = new StaticSearchPattern();
                //populate pattern...
                UWFunctionsFileIO.SerializeToXMLFile(pattern1, "myFile.xml");
                
                List&lt;double&gt; myList = new List&lt;double&gt;();
                //populate list...
                UWFunctionsFileIO.SerializeToXMLFile(myList, "myFile.xml");
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectToSerialize"></param>
            <param name="directoryFileString"></param>
        </member>
        <member name="M:UW.Utilities.UWFunctionsFileIO.DeserializeFromXMLFile``1(System.String)">
            <summary>
            Deserialize an objects from a file.  Note that you will need to explicitly state the data type when using this (see usage examples)
            
            Note:  This may throw exceptions in the event that it cannot deserialize successfully.
            Client should therefore use appropriate exception handling/catching with this method.
            
            Example Usage:
            
                int myInt = UWFunctionsFileIO.DeserializeFromXMLFile&lt;int&gt;("myFile.xml");    //assumes this file has int data in it (ie an int was serialized using SerializeToXMLFile
                StaticSearchPattern pattern1 = UWFunctionsFileIO.DeserializeFromXMLFile&lt;StaticSearchPattern&gt;("myFile.xml");    
                List&lt;double&gt; myList = UWFunctionsFileIO.DeserializeFromXMLFile&lt;List&lt;double&gt;&gt;("myFile.xml");   
            </summary>
            <typeparam name="T"></typeparam>
            <param name="directoryFileString"></param>
            <returns></returns>
        </member>
        <member name="T:UW.Utilities.UWFunctionsLists">
            <summary>
            A class to provide functions which work with List objects
            </summary>
        </member>
        <member name="M:UW.Utilities.UWFunctionsLists.AreListsEqualByValue``2(System.Collections.Generic.List{``0},System.Collections.Generic.List{``1})">
            <summary>
            Checks if each element in the list array have the same values.  
            
            This requires that the list contains value type objects or objects where the Equals method compares equality by value.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="A"></param>
            <param name="B"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsLists.AreListsEqualByValue``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Checks if each element in the list array have the same values. 
            Two elements at the same index are compared using the specified comparer to determine equality.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="A"></param>
            <param name="B"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsLists.ConvertListTo2DColArray``1(System.Collections.Generic.List{``0})">
            <summary>
            Convert  the list to a 2D column array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsLists.ConvertListTo2DRowArray``1(System.Collections.Generic.List{``0})">
            <summary>
            Convert  the list to a 2D row array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsLists.ConvertListToDeliniatedString``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            Convert the list to a string where each element is deliniated by the specified character deliniator.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="A"></param>
            <param name="deliniator"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsLists.DisplayList``1(System.Collections.Generic.List{``0},System.Boolean)">
            <summary>
            Display the list with each element of the array on a different line.  If horizontal is true, the display the list on the same line, elements are deliniated by a ', ' sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="w"></param>
            <param name="horizontal">set to true if you would rather have the list displayed horizontally with each element seperated by a ", " string</param>
        </member>
        <member name="M:UW.Utilities.UWFunctionsLists.ReadListDoubleFromFile(System.String)">
            <summary>
            Read the contents of a file into a List &gt; double &lt;.  The file should have only a
            single column of numbers.
            </summary>
            <param name="directoryFileString"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsLists.WriteListToFile``1(System.Collections.Generic.List{``0},System.String,System.String)">
            <summary>
            Write the list to the a file
            </summary>
            <typeparam name="T"></typeparam>
            <param name="A"></param>
            <param name="directoryFileString"></param>
            <param name="deliniator"></param>
        </member>
        <member name="M:UW.Utilities.UWFunctionsLists.ReturnShiftedList``1(System.Collections.Generic.List{``0})">
            <summary>
            Returns a List which is the same as the input list but the elements are shifted forward by 1 in a ring-buffer sense.  For example
            
            index   0   1   2   3
            before  A   B   C   D
            after   D   A   B   C
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsLists.ReturnShiftedListBackwards``1(System.Collections.Generic.List{``0})">
            <summary>
            Returns a List which is the same as the input list but the elements are shifted backwards by 1 in a ring-buffer sense.  For example
            
            index   0   1   2   3
            before  A   B   C   D
            after   B   C   D   A
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsLists.RemoveImmediateDuplicates``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Removes duplicates which occur directly next to each other in the list.  
            
            For example
            
            1 2 3 3 4 5 6 6 6 2 2 2
            
            becomes
            
            1 2 3 4 5 6 2
            
            Two items are tested as duplicates using the specified comparer.
            
            Note that this returns a list with the duplicates removed, it does not remove the items from the passed in list (the passed in list remains unchanged).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsLists.RemoveApproximate``1(System.Collections.Generic.List{``0},``0,System.Collections.Generic.IEqualityComparer{``0},System.Int32@)">
            <summary>
            Removes the first occurance of the list which is approximately equal to item.  Approximately equal is defined by the specified comparer.
            
            Note that this removes the item from the list directly (similar behavior to List.Remove()).
            
            This also can return the index of where it was removed from the original list (ie before the remove operation).
            
            See also UWFunctionsLists.RemoveApproximateAll
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="item"></param>
            <param name="comparer"></param>
            <param name="originalIndex">index of where it was removed from the original list</param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsLists.RemoveApproximate``1(System.Collections.Generic.List{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Removes the first occurance of the list which is approximately equal to item.  Approximately equal is defined by the specified comparer.
            
            Note that this removes the item from the list directly (similar behavior to List.Remove()).
            
            See also UWFunctionsLists.RemoveApproximateAll
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="item"></param>
            <param name="comparer"></param>
            <returns>true if item was removed from the list, false otherwise</returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsLists.RemoveApproximateAll``1(System.Collections.Generic.List{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Removes all occurances of the list which are approximately equal to item.  Approximately equal is defined by the specified comparer.
            
            Note that this removes the item from the list directly (similar behavior to List.Remove()).
            
            See also UWFunctionsLists.RemoveApproximate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="item"></param>
            <param name="comparer"></param>
            <returns>true if item was removed from the list, false otherwise</returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsLists.RemoveDuplicates``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Removes duplicates from the list.  Duplicates are defined by the specified comparer.
            This keeps the first instance of a duplicate in the list but removes all subsequent duplicates.
            This preserves the order of the original list in the expected sense.
            Note that this removes the item from the list directly (similar behavior to List.Remove()).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsLists.LastElement``1(System.Collections.Generic.List{``0})">
            <summary>
            Returns the last element of the list.  If this list is null or has 0 element, this throws an exception.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:UW.Utilities.UWFunctionsMisc">
            <summary>
            A class for providing functions which perform some sort of miscellaneous operations.
            
            Functions which are math specific are provided by the UWFunctionsMath class.
            </summary>
        </member>
        <member name="M:UW.Utilities.UWFunctionsMisc.AreValuesApproximatelyEqual(System.Double,System.Double,System.Double)">
            <summary>
            Check if the a and b are approximately equal to each other (within the specified tolerance).
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsMisc.AreValuesApproximatelyEqual(System.Single,System.Single,System.Single)">
            <summary>
            Check if the a and b are approximately equal to each other (within the specified tolerance).
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsMisc.IsApproximatelyEqual(System.Double,System.Double,System.Double)">
            <summary>
            Checks if this is approximately equal to the value b (within the specified tolerance)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsMisc.IsApproximatelyEqual(System.Single,System.Single,System.Single)">
            <summary>
            Checks if this is approximately equal to the value b (within the specified tolerance)
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsMisc.IsObjectInRange``1(``0,``0,``0)">
            <summary>
            Returns true if scalar val is in the range [valMin, valMax], returns false otherwise.  
            
            valMin must be less than or equal to valMax.  
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val"></param>
            <param name="valMin"></param>
            <param name="valMax"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsMisc.IsObjectInRangeExclusive``1(``0,``0,``0)">
            <summary>
            Returns true if scalar val is in the range (valMin, valMax), returns false otherwise.  
            
            The bounds are exclusive in the sense that this is true if val is strictly greater than valMin and strictly less than valMax.
            
            valMin must be less than or equal to valMax.  
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val"></param>
            <param name="valMin"></param>
            <param name="valMax"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsMisc.ReturnStringRepresentingTypeName``1(``0)">
            <summary>
            Returns a string which represents the type of the input argument.  For example, if the input is a double object, this should return "double".
            
            This function only supports user defined mappings between types and the string representing the name.  In other words, you may need to
            add to this function to support other types.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val">object to get the name of the type</param>
            <returns>string represeting the type of the input argument</returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsMisc.Saturate``1(``0,``0,``0)">
            <summary>
            Saturate a value between the specified values.
            </summary>
            <param name="val"></param>
            <param name="valMin"></param>
            <param name="valMax"></param>
            <returns>x if x is in [xMin, xMax], otherwise xMin or xMax depending it x is below or above these values, respectively.</returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsMisc.AreBothNull``1(``0,``0)">
            <summary>
            Returns true if both A and B are null, false otherwise.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsMisc.AreBothNonNull``1(``0,``0)">
            <summary>
            Returns true if both A and B are non-null, false otheriwse.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="A"></param>
            <param name="A"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsMisc.AreMismatchedNull``1(``0,``0)">
            <summary>
            Returns true of one, but not both, of the objects are null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:UW.Utilities.UWFunctionsStrings">
            <summary>
            Utility functions for working with string objects
            </summary>
        </member>
        <member name="M:UW.Utilities.UWFunctionsStrings.DoesSubstringExistInString(System.String,System.String)">
            <summary>
            Determines if the substring is located within the totalString.
            
            If totalString or substring is empty ("") or null, the return is 0.
            </summary>
            <param name="totalString">Total string to search</param>
            <param name="substring">substring to look for in the total string</param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsStrings.FrameString(System.String)">
            <summary>
            Frames the string when outputting it to the screen.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:UW.Utilities.UWFunctionsStrings.RemoveFirstNCharacters(System.String,System.Int32)">
            <summary>
            Remove the first N characters from a string.
            </summary>
            <param name="totalString">Total string</param>
            <param name="N">number of characters to remove</param>
            <returns>string with characters removed</returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsStrings.IsHexadecimal(System.String)">
            <summary>
            Checks if the string only contains hexadecimal values
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsStrings.IsOctal(System.String)">
            <summary>
            Checks if the string only contains octal values
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsStrings.ToHexadecimal(System.Char)">
            <summary>
            Attempts to map the char c to a hexadecimal char.  
            
            Since this is not a 1-to-1 mapping, many different inputs chars may be mapped to the same hex char.
            </summary>
            <param name="c">char to convert to hex</param>
            <returns>a hex value associated with the input char (not unique)</returns>
        </member>
        <member name="M:UW.Utilities.UWFunctionsStrings.ToOctal(System.Char)">
            <summary>
            Attempts to map the char c to an octal char.  
            
            Since this is not a 1-to-1 mapping, many different inputs chars may be mapped to the same octal char.
            </summary>
            <param name="c">char to convert to octal</param>
            <returns>a octal value associated with the input char (not unique)</returns>
        </member>
        <member name="T:UW.Utilities.UWFunctionsTime">
            <summary>
            A class for providing functions which perform operations related to time (ie DateTime, TimeSpan, etc.).
            </summary>
        </member>
        <member name="M:UW.Utilities.UWFunctionsTime.IsTimeInSpecifiedRange(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Check if the specifiedTime is in the time period of [startTime, endTime].
            </summary>
            <param name="specifiedTime"></param>
            <param name="startTime"></param>
            <param name="endTime"></param>
            <returns></returns>
        </member>
    </members>
</doc>
